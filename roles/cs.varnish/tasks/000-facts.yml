- name: Print configured varnish service params
  debug:
    msg: |
      ================================================
      =         Varnish Service Configuration        =
      ================================================

      Dynamically computed parameters for target node.

      ---

      Total target system vCPUs: {{ ansible_processor_vcpus }}
      Total target system memory: {{ ( ansible_memtotal_mb ~ 'MB' ) | human_to_bytes | human_readable }}

      ---

      Approx. max. total memory usage: {{ varnish_full_mem_usage | int | human_readable }}
      Approx. reserved (left) system memory: {{ (varnish_total_sys_mem | int - varnish_full_mem_usage | int) | human_readable }}

      VSM/VSL memory: {{ varnish_vs_space_mem | int | human_readable }}
      Dynamic memory calculation base: {{ varnish_dyn_mem_quota | int | human_readable }}
      Object storage memory: {{ varnish_storage_mem | int| human_readable }}

      Max. total number of threads: {{ varnish_thread_pool_max | int * varnish_thread_pools | int }}
      Approx. max. single thread memory: {{ varnish_thread_mem_est | int | human_readable }}
      Approx. max. total thread memory: {{ varnish_thread_mem_quota | int | human_readable }}

      --- Daemon Startup Parameters ---

      {{ varnish_params | to_nice_yaml }}

- name: Get Varnish backends - running EC2 app instances (AWS)
  block:
    - name: Get VPC IP addresses of backend app instances
      delegate_to: localhost
      become: no
      ec2_instance_info:
        region: "{{ aws_region }}"
        filters: "{{ varnish_backend_instances_filter_base | combine(varnish_backend_instances_aws_tags | prefix_keys('tag:')) }}"
      register: _varnish_backends_ec2_instance_info

    - name: Set Varnish backend instances if any are running (AWS)
      set_fact:
        varnish_backend_instances_app: "{{ _varnish_backends_ec2_instance_info.instances }}"
      when: _varnish_backends_ec2_instance_info.instances | length > 0
  when: varnish_standalone and aws_use

- name: Check if throttling shall be enabled
  set_fact:
    varnish_throttling_enabled: "{{ (varnish_standalone and varnish_throttling and varnish_throttling_rules | length > 0)|bool }}"

- name: Check if allowed cors origins are set
  set_fact:
    varnish_generate_allowed_origins: "{{ varnish_media_cors_allowed_origins is not defined }}"

- name: Collect all app hosts for allowed origins
  block:
    - name: Collect main Magento installation host
      set_fact:
        varnish_media_cors_allowed_origins: "{{ [magento_hostname] }}"
    - name: Collect hosts from HTTPS termination configuration
      set_fact:
        varnish_media_cors_allowed_origins: |
          {{
              varnish_media_cors_allowed_origins +
              https_termination_hosts | default([])|selectattr('server_name', 'defined')|map(attribute='server_name')|list +
              https_termination_hosts | default([])|selectattr('aliases', 'defined')|map(attribute='aliases')|list | flatten
          }}
      when: mageops_https_termination_enable | default(false)
    - name: Add Cloudfront domnains
      set_fact:
        varnish_media_cors_allowed_origins: |
          {{
            varnish_media_cors_allowed_origins +
            [ aws_cloudfront_distribution_domain ] +
            aws_cloudfront_domain_aliases | default([])
          }}
      when: aws_cloudfront_distribution_create | default(false) and aws_cloudfront_distribution_domain | default(false, true)
  when: varnish_generate_allowed_origins
