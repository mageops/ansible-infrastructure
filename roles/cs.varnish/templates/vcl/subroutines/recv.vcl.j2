{% if varnish_lang_redirects | length > 0 %}
    set req.http.X-Full-Url = req.http.host + req.url;
    set req.http.Accept-Language = al_rule.filter(std.tolower(req.http.Accept-Language));


    if (req.url == "/"{% if varnish_lang_redirect_only_on_initial_visit %} && req.http.Cookie !~ "(vrredir|{{ php_session_name }})="{% endif %}) {

    {% for hostname, langs in varnish_lang_redirects.items() %}
        if (req.http.X-Full-Url != "{{ hostname }}" && req.http.Accept-Language ~ "^({{ langs | join('|')|lower }})$") {
            set req.http.Location = "http{% if mageops_https_enable %}s{% endif %}://{{ hostname }}";
            return(synth(302));
        }
    {% endfor %}
    }
{% endif %}

{% if varnish_throttling_enabled %}
{# Throttling shall be evaluated first after any redirects because if we throtthle then nothing else is done anyway #}
{% include "vcl/subroutines/recv_throttling.vcl.j2" %}
{% endif %}

{% if varnish_standalone %}
    {# This has to be first line, remember this is not declarative config, we always need the director! #}
    set req.backend_hint = app_director.backend();

    if (req.http.X-Use-Extra-Instance
        {% if aws_extra_app_asg_passthrough_uagent_pattern %}
            || req.http.User-Agent ~ "{{ aws_extra_app_asg_passthrough_uagent_pattern }}"
        {% endif %}
        {% if aws_extra_app_asg_passthrough_url_pattern %}
            || req.url ~ "{{ aws_extra_app_asg_passthrough_url_pattern }}"
        {% endif %}
        {% if aws_extra_app_asg_passthrough_ip_pattern %}
            || req.http.x-forwarded-for ~ "{{ aws_extra_app_asg_passthrough_ip_pattern }}"
        {% endif %}
    ) {
        set req.backend_hint = extra_director.backend();

        {% if varnish_extra_instance_failover_enable %}
        if (!std.healthy(req.backend_hint)) {
            set req.backend_hint = app_director.backend();
        }
        {% else %}
        # Extra instance failover is disabled - requests will return 5xx
        # in case all of the the extra instances are not healthy.
        {% endif %}
    }
{% endif %}

{% if varnish_vcl_recv_extra %}
# ---  [START] custom project code  ---
{{ varnish_vcl_recv_extra }}
# ---  [END] custom project code  ---
{% endif %}

if (req.method == "PURGE") {
    if (client.ip !~ purge) {
        return (synth(405, "Method not allowed"));
    }
    # To use the X-Pool header for purging varnish during automated deployments, make sure the X-Pool header
    # has been added to the response in your backend server config. This is used, for example, by the
    # capistrano-magento2 gem for purging old content from varnish during it's deploy routine.
    if (!req.http.X-Magento-Tags-Pattern && !req.http.X-Pool) {
        return (synth(400, "X-Magento-Tags-Pattern or X-Pool header required"));
    }
    if (req.http.X-Magento-Tags-Pattern) {
      ban("obj.http.X-Magento-Tags ~ " + req.http.X-Magento-Tags-Pattern);
    }
    if (req.http.X-Pool) {
      ban("obj.http.X-Pool ~ " + req.http.X-Pool);
    }
    return (synth(200, "Purged"));
}

if (req.method != "GET" &&
    req.method != "HEAD" &&
    req.method != "PUT" &&
    req.method != "POST" &&
    req.method != "TRACE" &&
    req.method != "OPTIONS" &&
    req.method != "DELETE") {
      /* Non-RFC2616 or CONNECT which is weird. */
      return (pipe);
}

{% if varnish_redirect_to_host is defined %}
    if (req.http.host != "{{ varnish_redirect_to_host }}") {
            set req.http.location ="http{% if mageops_https_enable %}s{% endif %}://{{ varnish_redirect_to_host }}" + req.url;
            return(synth({{ varnish_redirect_to_host_code | default(302) }}));
    }
{% endif %}

if (req.restarts == 0) {
    if (req.http.x-forwarded-for) {
        # leave only real client ip - always first ip
        set req.http.X-Forwarded-For = regsub(req.http.X-Forwarded-For, "^([^,]+),?.*$", "\1");
    } else {
        set req.http.X-Forwarded-For = client.ip;
    }
}

# We only deal with GET and HEAD by default
if (req.method != "GET" && req.method != "HEAD") {
    return (pass);
}

if( req.url ~ "^/payone/transactionstatus$"){
    return (pass);
}

if (req.url ~ "^/cron.php$") {
    return (pass);
}

{% if varnish_debug_request_token | default(false, true) %}
# Debugging passthrough conditions
{% set varnish_debug_request_token_query_param_pattern =
    ( varnish_debug_request_query_param_name | regex_escape )
    ~ '=' ~ ( varnish_debug_request_token | regex_escape )
%}

{% set varnish_debug_request_token_cookie_pattern =
    ( varnish_debug_request_cookie_name | regex_escape )
    ~ '=' ~ ( varnish_debug_request_token | regex_escape )
%}

if (
    req.url ~ "[?&]{{ varnish_debug_request_token_query_param_pattern }}[$?&]"
    || req.http.{{ varnish_debug_request_header_name }} == "{{ varnish_debug_request_token }}"
    || req.http.Cookie ~ "(^|;\s*){{ varnish_debug_request_token_cookie_pattern }}(;|$)"
) {
    set req.http.{{ varnish_debug_request_info_header_name }} = "Token-Verified-Matching; Request-Passed-Through";

    return (pass);
}
{% endif %}

if (req.http.X-Blackfire-Query) {
    if (req.esi_level > 0) {
        unset req.http.X-Blackfire-Query;
    } else {
        return (pass);
    }
}

# Bypass shopping cart, checkout and search requests
if (req.url ~ "/checkout" || req.url ~ "/catalogsearch") {
    return (pass);
}

# Bypass health check requests
if (req.url ~ "/health_check.php") {
    return (pass);
}

# Set initial grace period usage status
set req.http.grace = "none";

# normalize url in case of leading HTTP scheme and domain
set req.url = regsub(req.url, "^http[s]?://", "");

# do not cache robots.txt
if(req.url ~ "/robots.txt") {
    return (pass);
}

# do not cache any *.xml files
if (req.url ~ "\.(xml|csv)$") {
    return (pass);
}

std.collect(req.http.Cookie);

if (req.url ~ "^/(pub/)?(media|static)/.*\.(ico|css|js|jpg|jpeg|png|gif|tiff|bmp|webp|gz|tgz|bz2|tbz|mp3|ogg|svg|swf|woff|woff2|eot|ttf|otf)$") {
    unset req.http.Https;
    unset req.http.X-Forwarded-Proto;
    unset req.http.Cookie;
}

{% if varnish_secure_site %}
    if (! req.url ~ "^/(pub/)?(media|static)/.*\.(html|json|ico|css|js|jpg|jpeg|png|gif|tiff|bmp|webp|gz|tgz|bz2|tbz|mp3|ogg|svg|swf|woff|woff2|eot|ttf|otf)$"
        && ! req.url ~ "^/cron.php$"
        && ! req.url ~ "^/rest/.*$"
        && ! req.http.Authorization ~ "Basic {{ varnish_secure_site_http_auth_string | b64encode }}"
        # Allow local network to connect without auth directly, however show auth if request comes from front nginx (X-Real-Ip is set)
        && (! client.ip ~ client_ip_whitelist || req.http.x-real-ip)
        && (! std.ip(req.http.X-forwarded-for, "0.0.0.0") ~ trusted)
    ) {
        return (synth(401, "Restricted"));
    }
{% endif %}

# Compression filter. See https://www.varnish-cache.org/trac/wiki/FAQ/Compression
if (req.http.Accept-Encoding) {
    if (req.url ~ "\.(jpg|jpeg|png|gif|gz|tgz|bz2|webp|tbz|mp3|ogg|swf|flv)$") {
        # No point in compressing these
        unset req.http.Accept-Encoding;
    } elsif (req.http.Accept-Encoding ~ "gzip") {
        set req.http.Accept-Encoding = "gzip";
    } elsif (req.http.Accept-Encoding ~ "deflate" && req.http.user-agent !~ "MSIE") {
        set req.http.Accept-Encoding = "deflate";
    } else {
        # unkown algorithm
        unset req.http.Accept-Encoding;
    }
}

{% for param in varnish_strip_params %}
# remove all forms of param: {{ param }}
set req.url = regsuball(req.url,"\?{{ param }}=[^&]+$","");  # strips when QS = "?param=AAA"
set req.url = regsuball(req.url,"\?{{ param }}=[^&]+&","?"); # strips when QS = "?param=AAA&foo=bar"
set req.url = regsuball(req.url,"&{{ param }}=[^&]+","");    # strips when QS = "?foo=bar&param=AAA" or QS = "?foo=bar&param=AAA&bar=baz"

{% endfor %}

return (hash);