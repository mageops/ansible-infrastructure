# Throttling shall work only for requests which come from the user-facing nginx
# so they will have the X-Real-Ip header. We cannot use client.identity or client.ip
# for the same reason.

{% macro varnish_rate_limit_rule(rule) -%}
        ### Throttling rule - {{ rule.id }} ###

        if ( req.url ~ "{{ rule.path_pattern }}"
        {%- if rule.method | default(false, true) %} && req.method == "{{ rule.method | upper }}" {% endif -%}
        ) {
            {% if rule.whitelisted | default(false, true) -%}
            set req.http.X-RateLimit-Identity = req.http.x-real-ip + "{{ rule.id }}";
            set req.http.X-RateLimit-Remaining = vsthrottle.remaining(req.http.X-RateLimit-Identity, {{ rule.limit }}, {{ rule.duration }}, {{ rule.block | default('0s') }});

            if (vsthrottle.is_denied(req.http.X-RateLimit-Identity, {{ rule.limit }}, {{ rule.duration }}, {{ rule.block | default('0s') }})) {
                {% if rule.secret | default(false, true) %}
                unset req.http.X-RateLimit-Identity;
                unset req.http.X-RateLimit-Remaining;
                {% endif %}
                return (synth(429, "{{ rule.error_message | default('Too many requests') }}"));
            }
            {% if rule.secret | default(false, true) %}
                unset req.http.X-RateLimit-Identity;
                unset req.http.X-RateLimit-Remaining;
            {% endif %}
            {%- endif %}
        }
{%- endmacro %}


if (req.http.X-Real-Ip) {
    {% for rule in varnish_throttling_rules %}
        {{ varnish_rate_limit_rule(rule) }}
        {%- if not loop.last -%}
        else
        {%- endif -%}
    {% endfor %}

    {% for rule in varnish_throttling_rules_always %}
        {{ varnish_rate_limit_rule(rule) }}
    {% endfor %}
}
