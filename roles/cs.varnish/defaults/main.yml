# Whether to password protect the website (basic auth)
varnish_secure_site: yes

# Credentials for basic auth protection
varnish_secure_site_user: varnish
varnish_secure_site_password: varnish

# Bypass basic auth protecting when remote IP matches any of these
varnish_secure_site_trusted_ips: []

# List of CIDRs that can perform PURGE requests
# By defaults they are accepted only from 127.0.0.1
varnish_purge_trusted_ips: []

varnish_extra_packages:
  - varnish-modules-extra
  - varnish-module-accept

varnish_port: 80
varnish_listen_address: ''
varnish_default_backend_ip: 127.0.0.1
varnish_backend_first_byte_timeout: "300s"

varnish_log_user: "varnishlog"
varnish_log_group: "varnishlog"

varnish_vsl_space: 80M
varnish_vsm_space: 1M

# see: https://varnish-cache.org/docs/4.1/reference/varnishd.html#http-resp-hdr-len
varnish_http_resp_hdr_len: 42000

# see: https://varnish-cache.org/docs/4.1/reference/varnishd.html#http-resp-size
varnish_http_resp_size: 84000

# Per-thread workspace memory allocation (the sum is basically thread's heap).
# see: https://varnish-cache.org/docs/4.1/reference/varnishd.html#workspace-backend
# WARNING! Shall be bigger than `http_resp_size` as resp size is allocated from this pool!
varnish_workspace_backend: 262144

# see: https://varnish-cache.org/docs/4.1/reference/varnishd.html#workspace-client
varnish_workspace_client: 65536

# see: https://varnish-cache.org/docs/4.1/reference/varnishd.html#workspace-thread
varnish_workspace_thread: 2048

# Varnish minimum 2k, POSIX default sysconf(_SC_THREAD_STACK_MIN) = 16384
# Check system limit in Linux:
#   #include <unistd.h>
#   #include <stdio.h>
#   #include <limits.h>
#   int main() { printf("sysconf(_SC_THREAD_STACK_MIN) = %lu\n", sysconf(_SC_THREAD_STACK_MIN)); }
varnish_thread_pool_stack: 16384

# Helper variables for estimating the memory requirements (extra 2048B)
varnish_thread_mem: >-
  {{
    varnish_workspace_thread
      + varnish_workspace_client
      + varnish_workspace_backend
      + varnish_thread_pool_stack
      + 2048
  }}

# System memory left after allocating VSL and VSM.
varnish_memory_ceil: >-
  {{
      (ansible_memtotal_mb * 1024 * 1024)
        - varnish_vsl_space | human_to_bytes
        - varnish_vsm_space | human_to_bytes
  }}


# Relative memory used for object storage
varnish_object_mem_rel: 0.4
# Relative system memory used for thread limit calculation
varnish_thread_mem_rel: 0.6

# Cached object storage size
varnish_memory: "{{ (varnish_memory_ceil | int * varnish_object_mem_rel / 1024) | int ~ 'k' }}"

# Max memory left for threads after allocating VSL, VSM and object storage.
# Does not take into account memory needed for system and other services.
# Also note that each cached object's metadata structure requires ~1k.
varnish_thread_ceil: "{{ (varnish_memory_ceil | int - varnish_memory | human_to_bytes) * varnish_thread_mem_rel }}"

# see: https://varnish-cache.org/docs/4.1/reference/varnishd.html#thread-pool-max
varnish_thread_pools: "{{ ansible_processor_vcpus }}"

# Use less than half of the "leftover" memory for threads as system
# and other resources like per-object structures require it too
varnish_thread_pool_max: "{{ (varnish_thread_ceil | int / varnish_thread_mem | int / varnish_thread_pools | int) | int }}"
varnish_thread_pool_min: "{{ [[(varnish_thread_pool_max | int / 5) | int, 100] | max, varnish_thread_pool_max | int] | min }}"

# Debugging variable indicating theoretical memory left for rest of the system
varnish_leftover_sysmem: >-
  {{
      (ansible_memtotal_mb * 1024 * 1024)
        - varnish_vsl_space | human_to_bytes
        - varnish_vsm_space | human_to_bytes
        - varnish_memory | human_to_bytes
        - varnish_thread_ceil | int
  }}


varnish_params:
  vsl_space: "{{ varnish_vsl_space }}"
  vsm_space: "{{ varnish_vsm_space }}"
  http_resp_hdr_len: "{{ varnish_http_resp_hdr_len }}"
  http_resp_size: "{{ varnish_http_resp_size }}"
  workspace_thread: "{{ varnish_workspace_thread }}"
  workspace_backend: "{{ varnish_workspace_backend }}"
  workspace_client: "{{ varnish_workspace_client }}"
  thread_pools: "{{ varnish_thread_pools }}"
  thread_pool_max: "{{ varnish_thread_pool_max }}"
  thread_pool_min: "{{ varnish_thread_pool_min }}"
  thread_pool_stack: "{{ varnish_thread_pool_stack }}"

# Size of the tmpfs mount for VSL (shm-log)
varnish_tmpfs_size: >-
  {{
    ((
      1.1 * (varnish_vsl_space | human_to_bytes
              + varnish_vsm_space | human_to_bytes)
    ) / 1024) | int ~ 'k'
  }}

varnish_vcl_conf: /etc/varnish/default.vcl
varnish_backends_vcl: /etc/varnish/backends.vcl
varnish_run_dir: /var/run/varnish
varnish_pid_file: "{{ varnish_run_dir }}/varnish.pid"
varnish_storage: "malloc"
# Whether to route requests intendend for extra instances
# to the main ones if the extra ones are not healthy.
varnish_extra_instance_failover_enable: yes

varnish_syscfg_limit_nofile: 131072
varnish_syscfg_limit_memlock: 85983232
varnish_syscfg_tasks_max: "infinity"
varnish_syscfg_limit_core: "infinity"

# Error page color theme
varnish_error_page_color_primary: "#212121"

# Display custom page in an IFRAME
varnish_error_page_url: no

# HTTP Throttling Switch
# Warning! This will be enabled only if `varnish_standalone` is enabled.
# This is because throttling makes no sense for many varnish instances
# which do not communicate.
varnish_throttling: no

# Throttling rules, an array of items, each containing:
# - `id` (required) - unqiue string used internally for hash computation
# - `path_pattern` (required) - regex pattern that defined affects request paths
# - `error_message` (optional) - custom error string returned to client when this rule is triggered
# - `limit` (required) - number of requests until clien tis throttled
# - `duration` (required) - time window over which the `limit` requests may be performed
#   (use varnish duration format, see: https://varnish-cache.org/docs/4.1/reference/vcl.html#durations)
#
# Note: The rules are evaluated in the order they are defined. First limit that is exceeded
# will stop any further evaluation. You should order the rules from most specific to the widest.
varnish_throttling_rules: []

varnish_backend_instances_extra: []
varnish_backend_instances_app:
    - private_ip_address: "{{ varnish_default_backend_ip }}"
      instance_id: default

varnish_log_dir: /var/log/varnish

varnish_ncsa_logging: no
varnish_ncsa_logfile: "{{ varnish_log_dir }}/varnishncsa.log"
varnish_ncsa_log_format: '%h %l %u %t "%r" %s %b "%{Referer}i" "%{User-agent}i"'

varnish_purge_logging: no
varnish_purge_logfile: "{{ varnish_log_dir }}/varnish-purge.log"

# Extra VCL code to add to subroutines
varnish_vcl_recv_extra: ""
varnish_vcl_synth_extra: ""
varnish_vcl_backend_error_extra: ""

varnish_strip_params: ['gclid']

# Set to unique, secret value in order to enable
# pass-through request debugging
varnish_debug_request_token: ~
varnish_debug_request_query_param_name: ___varnish_debug_token___
varnish_debug_request_cookie_name: ___varnish_debug_token___
varnish_debug_request_header_name: X-Varnish-Debug-Token
varnish_debug_request_info_header_name: X-Varnish-Debug-Request-Info
varnish_media_cors_enabled: yes
varnish_media_cors_max_age: 2678400
