# Whether to password protect the website (basic auth)
varnish_secure_site: yes

# Credentials for basic auth protection
varnish_secure_site_user: varnish
varnish_secure_site_password: varnish

# Bypass basic auth protecting when remote IP matches any of these
# And allow sending debug headers
varnish_trusted_ips: []

# List of CIDRs that can perform PURGE requests
# By defaults they are accepted only from 127.0.0.1
varnish_purge_trusted_ips: []

varnish_extra_packages:
  - varnish-modules-extra
  - varnish-module-accept

varnish_port: 80
varnish_listen_address: ~
varnish_default_backend_ip: 127.0.0.1
varnish_backend_first_byte_timeout: "300s"

varnish_log_user: "varnishlog"
varnish_log_group: "varnishlog"

# Memory allocated for malloc storage backend, if empty then auto calculated
# from the `varnish_storage_mem_rel` and `varnish_sys_mem_rel` relative values.
varnish_memory: ~

# Relative amount of system memory that can be consumed by varnish
varnish_sys_mem_rel: 0.8

# Relative chunk of `varnish_sys_mem_rel` used for object storage
varnish_storage_mem_rel: 0.7

# The minimum amount of system memory that has to be reserved for other
# services. This variable has effect only if the memory left after subtracting
# the `varnish_sys_mem_rel` calculation is smaller than this value.
varnish_sys_mem_reserved: 128M

# Since we don't write logs anywhere the default of 80M seems to be an overkill
# https://varnish-cache.org/docs/6.0/reference/varnishd.html#vsl-space
varnish_vsl_space: 31M
varnish_vsm_space: 1M

# See: https://varnish-cache.org/docs/6.0/reference/varnishd.html#http-resp-hdr-len
varnish_http_resp_hdr_len: 40k

# See: https://varnish-cache.org/docs/6.0/reference/varnishd.html#http-resp-size
varnish_http_resp_size: 80k

# Per-thread workspace memory allocation (the sum is basically thread's heap)
# See: https://varnish-cache.org/docs/6.0/reference/varnishd.html#workspace-backend
# WARNING! Shall be bigger than `http_resp_size` as resp size is allocated from this pool!
varnish_workspace_backend: 256k

# See: https://varnish-cache.org/docs/6.0/reference/varnishd.html#workspace-client
varnish_workspace_client: 64k

# See: https://varnish-cache.org/docs/6.0/reference/varnishd.html#workspace-thread
varnish_workspace_thread: 4k

# As of varnish 6.0 the default is 48k and lower values cause segfault with our VCL
varnish_thread_pool_stack: 64k

# Max. number of thread pools that should be at most the number of vCPUs
# See: https://varnish-cache.org/docs/6.0/reference/varnishd.html#thread-pool-max
varnish_thread_pools: "{{ ansible_processor_vcpus }}"

# The min/max number of threads per pool
varnish_thread_pool_max: "{{ [(varnish_thread_mem_quota | int / varnish_thread_mem_est | int / varnish_thread_pools | int) | int, 20] | max }}"
varnish_thread_pool_min: "{{ [[(varnish_thread_pool_max | int / 5) | int, 20] | max, varnish_thread_pool_max | int] | min }}"

# Any extra parameters that deamon is started with (`-p` arguments)
# Note: Overrides keys defined in the base parameters (`varnish_params_base` in `vars/main.yml`).
varnish_params_extra: {}

# Whether to route requests intendend for extra instances
# to the main ones if the extra ones are not healthy.
varnish_extra_instance_failover_enable: yes

# Error page color theme
varnish_error_page_color_primary: "#212121"

# Display custom page in an IFRAME
varnish_error_page_url: no

# HTTP Throttling Switch
# Warning! This will be enabled only if `varnish_standalone` is enabled.
# This is because throttling makes no sense for many varnish instances
# which do not communicate.
varnish_throttling: no

# Throttling rules, an array of items, each containing:
# - `id` (required) - unqiue string used internally for hash computation
# - `path_pattern` (required) - regex pattern that defined affects request paths
# - `error_message` (optional) - custom error string returned to client when this rule is triggered
# - `limit` (required) - number of requests until clien tis throttled
# - `duration` (required) - time window over which the `limit` requests may be performed
#   (use varnish duration format, See: https://varnish-cache.org/docs/6.0/reference/vcl.html#durations)
# - `block` (optional) - if rate is exceded, ban user for this duration
#
# Note: The rules are evaluated in the order they are defined. First limit that is exceeded
# will stop any further evaluation. You should order the rules from most specific to the widest.
varnish_throttling_rules: []

varnish_backend_instances_extra: []
varnish_backend_instances_app:
    - private_ip_address: "{{ varnish_default_backend_ip }}"
      instance_id: default

varnish_log_dir: /var/log/varnish

varnish_ncsa_logging: no
varnish_ncsa_logfile: "{{ varnish_log_dir }}/varnishncsa.log"
varnish_ncsa_log_format: '%h %l %u %t "%r" %s %b "%{Referer}i" "%{User-agent}i"'

varnish_purge_logging: no
varnish_purge_logfile: "{{ varnish_log_dir }}/varnish-purge.log"

# Extra VCL code to add to subroutines
varnish_vcl_recv_extra: ""
varnish_vcl_synth_extra: ""
varnish_vcl_backend_error_extra: ""

varnish_strip_params: ['gclid']

# Set to unique, secret value in order to enable
# pass-through request debugging
varnish_debug_request_token: ~
varnish_debug_request_query_param_name: ___varnish_debug_token___
varnish_debug_request_cookie_name: ___varnish_debug_token___
varnish_debug_request_header_name: X-Varnish-Debug-Token
varnish_debug_request_info_header_name: X-Varnish-Debug-Request-Info
varnish_media_cors_enabled: yes
varnish_media_cors_max_age: 2678400

varnish_vcl_conf: /etc/varnish/default.vcl
varnish_backends_vcl: /etc/varnish/backends.vcl
varnish_run_dir: /var/run/varnish
varnish_pid_file: "{{ varnish_run_dir }}/varnish.pid"

varnish_syscfg_limit_nofile: 131072
varnish_syscfg_limit_memlock: 85983232
varnish_syscfg_tasks_max: "infinity"
varnish_syscfg_limit_core: "infinity"

# This option will hide all informations from headers
# that reveal if page was cached in varnish
# If you are on varnish_trusted_ips list you will
# still receive those headers
varnish_do_not_expose_caching: no
