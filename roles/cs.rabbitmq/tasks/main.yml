- name: Install RabbitMQ Erlang Package
  yum:
    allow_downgrade: no
    name: "{{ rabbitmq_erlang_version }}"
  register: _rabbitmq_erlang_package
  notify: Restart rabbitmq

- name: Install RabbitMQ Package
  yum:
    allow_downgrade: no
    name: "{{ rabbitmq_server_version }}"
  register: _rabbitmq_server_package
  notify: Restart rabbitmq

- name: Ensure yum versionlock plugin is installed
  yum:
    name:
      - yum-plugin-versionlock
      - dnf-command(versionlock)
  when: _rabbitmq_erlang_package is changed or _rabbitmq_server_package is changed

# The versions need to be locked because the repository
# has all major versions within the same package name and this
# could cause an unintended bump to a version with breaking changes.
# Thus every upgrade has to be performed in controlled manner.
- name: Lock RabbitMQ Package Versions
  block:
    - command: "yum versionlock {{ item }}"
      with_items:
        - "{{ rabbitmq_server_version }}"
        - "{{ rabbitmq_erlang_version }}"
    - command: "dnf versionlock {{ item }}"
      with_items:
        - "{{ rabbitmq_server_version }}"
        - "{{ rabbitmq_erlang_version }}"
      when: ansible_facts['pkg_mgr'] == "dnf"
  when: _rabbitmq_erlang_package is changed or _rabbitmq_server_package is changed


- name: Install rabbitmq configuration file
  template:
    src: config.j2
    dest: /etc/rabbitmq/rabbitmq.conf
    backup: yes
  notify: Restart rabbitmq

- name: Add management plugin to the list if needed
  set_fact:
    rabbitmq_plugins: "{{ rabbitmq_plugins + ['rabbitmq_management', 'rabbitmq_management_agent'] }}"
  when: rabbitmq_enable_management

# Do not use rabbitmq_plugin ansible module.
# It does not enable the plugins before server start and
# the server will not start because of wrong configuration.
- name: Configure enabled plugins
  copy:
    force: yes
    content: "[{{ rabbitmq_plugins | join(',') }}]." # The dot must stay
    dest: /etc/rabbitmq/enabled_plugins
  notify: Restart rabbitmq

- name: Configure node name
  copy:
    content: "NODENAME={{ rabbitmq_nodename }}"
    dest: /etc/rabbitmq/rabbitmq-env.conf

- name: Ensure the rabbitmq service is started and enabled
  service:
    name: rabbitmq-server
    state: started
    enabled: yes

- name: Force handler flush to restart server before futher actions
  meta: flush_handlers

- name: Ensure the default unprotected vhost is absent
  rabbitmq_vhost:
    node: "{{ rabbitmq_nodename }}"
    name: /
    state: absent

- name: Ensure vhosts exist
  rabbitmq_vhost:
    node: "{{ rabbitmq_nodename }}"
    name: "{{ item }}"
    state: present
  loop: "{{ rabbitmq_virtual_hosts }}"

- name: Ensure configured users exist
  rabbitmq_user:
    node: "{{ rabbitmq_nodename }}"
    update_password: always
    user: "{{ item.username }}"
    password: "{{ item.password }}"
    tags: "{{ rabbitmq_enable_management | ternary('monitoring', omit) }}"
    vhost: "{{ item.vhost }}"
    configure_priv: .*
    read_priv: .*
    write_priv: .*
    state: present
  loop: "{{ rabbitmq_users }}"
