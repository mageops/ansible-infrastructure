# We don't want to do this for every package as it takes time
- name: "Verify files for RPM package {{ package.rpm_name }}"
  command: yum verify-rpm '{{ package.rpm_name }}'
  args:
    warn: no
  failed_when: no
  changed_when: no
  when: package.reinstall_when_rpm_broken | default(false)
  register: mageops_ansible_pip_package_yum_verify_command

- name: "Set runtime information for processing package {{ package.pip_name }}"
  set_fact:
    mageops_ansible_pip_package:
      rpm: "{{ package.rpm_name | default(none, true) }}"
      pip: "{{ package.pip_name | default(none, true) }}"
      reinstall: >-
        {{
          package_rpm_broken or
          package.reinstall_when_version is defined | ternary(
            package_info.version | default('0.0.0') is version(
              package_version_constraint.threshold,
              package_version_constraint.operator
            ),
            false
          )
        }}
      broken: "{{ package_rpm_broken }}"
      uninstall: "{{ package.state | default('present') == 'absent' }}"
      origin: "{{ package_info.source | default('unknown') }}"
      version: "{{ package_info.version | default('unknown') }}"
      source: "{{ package.source | default('any') }}"
  vars:
    package_info: "{{ ( mageops_ansible_pip_package_info.packages.pip[package.pip_name] | default([{}]) | first ) }}"
    package_rpm_broken: "{{ mageops_ansible_pip_package_yum_verify_command.rc is defined and mageops_ansible_pip_package_yum_verify_command.rc != 0 }}"
    package_version_constraint: "{{ package.reinstall_when_version | default({'threshold': '0.0.0', 'operator': '<='}) }}"

- name: Package {{ mageops_ansible_pip_package.pip }} reinstallation notice
  debug:
    msg: >-
      NOTICE: Package {{ mageops_ansible_pip_package.pip }} will be reinstalled because
      {% if mageops_ansible_pip_package.broken %}
      package is broken - files do not match RPM
      {% else %}
      installed version {{ mageops_ansible_pip_package.version }} is
      {{ package.reinstall_when_version.operator }} {{ package.reinstall_when_version.threshold }}
      {% endif %}
  when: mageops_ansible_pip_package.reinstall

# Warning: Order is quite important here!
- name: Uninstall {{ mageops_ansible_pip_package.rpm }} RPM package
  yum:
    name: "{{ mageops_ansible_pip_package.rpm }}"
    state: absent
  when: >-
    (
      mageops_ansible_pip_package.reinstall
      or mageops_ansible_pip_package.uninstall
    )
    and mageops_ansible_pip_package.rpm

- name: Uninstall {{ mageops_ansible_pip_package.pip }} PIP package
  pip:
    name: "{{ mageops_ansible_pip_package.pip }}"
    state: absent
  when: >-
    (
      mageops_ansible_pip_package.reinstall
      or mageops_ansible_pip_package.uninstall
    )
    and mageops_ansible_pip_package.pip
    and mageops_ansible_pip_package.origin == 'pip'

- name: Ensure that {{ mageops_ansible_pip_package.rpm }} RPM package is {{ package.state }}
  yum:
    name: "{{ mageops_ansible_pip_package.rpm }}"
    state: "{{ package.state }}"
  when: >-
    mageops_ansible_pip_package.source == 'rpm'
    and mageops_ansible_pip_package.rpm

- name: Ensure that {{ mageops_ansible_pip_package.pip }} PIP package is {{ package.state }}
  pip:
    name: "{{ mageops_ansible_pip_package.pip }}"
    state: "{{ package.state }}"
  when: >-
    mageops_ansible_pip_package.source in ['any', 'pip']
    and mageops_ansible_pip_package.rpm

