- name: Get EC2 instance information for nodes
  ec2_instance_info:
    region: "{{ aws_region }}"
    filters: "{{ aws_node_facts_base_filters | combine(aws_node_facts_base_tags | combine(node.tags) | prefix_keys('tag:')) }}"
  loop:
    - name: app_builder
      tags: "{{ aws_tags_role_app_builder }}"
    - name: persistent
      tags: "{{ aws_tags_role_persistent }}"
    - name: varnish_loadbalancer
      tags: "{{ aws_tags_role_loadbalancer | combine(aws_tags_role_varnish_http_cache) }}"
    - name: elasticsearch
      tags: "{{ aws_tags_role_elasticsearch }}"
    - name: redis
      tags: "{{ aws_tags_role_redis_cache }}"
  loop_control:
    loop_var: node
    label: "{{ node.name }}"
  register: aws_node_instance_facts

- name: Set facts about node instances
  set_fact:
    aws_nodes_info: >-
      {{
          aws_nodes_info | default({}) | combine({
              result.node.name: result.instances | first | default(false)
          })
      }}
  loop: "{{ aws_node_instance_facts.results | default([]) }}"
  loop_control:
    loop_var: result
    label: "{{ result.node.name }}"

- name: Print info about running nodes
  debug:
    msg: "{{ item.key }} instance: {% if item.value %}{{ item.value.instance_id }} ({{ item.value.private_ip_address }} / {{ item.value.public_ip_address | default('N/A') }}){% else %}not found{% endif %}"
  loop: "{{ aws_nodes_info | default({}) | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: Set facts about nodes
  set_fact:
    aws_app_builder_node_instance: "{{ aws_nodes_info.app_builder | default(omit, true) }}"
    aws_persistent_node_instance: "{{ aws_nodes_info.persistent | default(omit, true) }}"
    aws_varnish_node_instance: "{{ aws_nodes_info.varnish_loadbalancer | default(omit, true) }}"
    aws_app_builder_node_ami_id: "{{ aws_nodes_info.app_builder.image_id | default(omit, true) }}"
    aws_persistent_node_ami_id: "{{ aws_nodes_info.persistent.image_id | default(omit, true) }}"
    aws_varnish_node_ami_id: "{{ aws_nodes_info.varnish_loadbalancer.image_id | default(omit, true) }}"

- name: Set varnish host to varnish loadbalancer
  set_fact:
    mageops_varnish_host: "{{ aws_nodes_info.varnish_loadbalancer.private_ip_address }}"
  when: varnish_as_loadbalancer and aws_nodes_info.varnish_loadbalancer

- name: Set elasticsearch host if not predefined
  set_fact:
    mageops_elasticsearch_host: "{{ aws_nodes_info.elasticsearch.private_ip_address }}"
  when: not mageops_elasticsearch_host | default(false, true) and aws_nodes_info.elasticsearch

# TODO: Find RabbitMQ through tags, right now we don't have option to separate it anyway
- name: Set RabbitMQ host if not predefined
  set_fact:
    mageops_rabbitmq_host: "{{ aws_nodes_info.elasticsearch.private_ip_address }}"
  when: not mageops_rabbitmq_host | default(false, true) and aws_nodes_info.elasticsearch

- name: Set redis host if not predefined
  set_fact:
    mageops_redis_host: "{{ aws_nodes_info.redis.private_ip_address }}"
  when: not mageops_redis_host | default(false, true) and aws_nodes_info.redis

- name: Set redis sessions host if not predefined
  set_fact:
    mageops_redis_sessions_host: "{{ aws_nodes_info.redis.private_ip_address }}"
  when: not mageops_redis_sessions_host | default(false, true) and aws_nodes_info.redis
