- name: Install elasticsearch packages
  package:
    name: elasticsearch
    state: latest
  register: elasticsearch_packages_install

# In case `/var` or `/var/run` is a tmpfs (common thing nowadays)
- name: Ensure var directories always exist
  lineinfile:
    path: /etc/tmpfiles.d/elasticsearch.conf
    regexp: "\\s+{{ entry.path | regex_escape }}\\s+"
    line: >-
      {{ entry.type | default('d') }}
      {{ entry.path }}
      {{ entry.mode | default('0755') }}
      {{ entry.user | default('elasticsearch') }}
      {{ entry.group | default('elasticsearch') }}
      {{ entry.age | default('-') }}
      {{ entry.argument | default('-') }}
    create: yes
  loop:
    - path: /var/run/elasticsearch/
    - path: /var/log/elasticsearch/
    - path: /var/lib/elasticsearch/
    - path: /var/log/elasticsearch/*.log
      mode: '0644'
      type: z
  loop_control:
    loop_var: entry
    label: "{{ entry.path }}"
  register: tmpfiles_config

- name: Ensure var directory changes are applied at once
  command: systemd-tmpfiles --create
  when: tmpfiles_config is changed

# Note: The detection is based on jar filename instead of `elasticsearch -V` command
# on purpose. This is a chicken-or-egg problem: when elasticsearch is upgraded from
# older version the old config files may be invalid and this will prevent the version
# check from completing but we need to know the version in order to install new configs.
# Thus a *passive* check that does not involve running es is used.
- name: Detect installed elasticsearch major version
  shell: |
    find /usr/share/elasticsearch/lib/ -type f -regex '.*/elasticsearch-[0-9]+\..*\.jar' -printf '%P' | sed -E 's/elasticsearch-(([0-9]+\.)+[0-9]+).*.jar/\1/'
  register: elasticsearch_get_installed_version
  failed_when: >-
    elasticsearch_get_installed_version.rc | default(0, true) | int != 0
      or elasticsearch_get_installed_version.stdout_lines | default([], true) | length == 0
  changed_when: false

- name: Detect running elasticsearch version
  uri:
    url: "http://{{ elasticsearch_network_host }}:{{ elasticsearch_http_port }}"
    return_content: yes
  register: elasticsearch_get_running_version
  failed_when: false
  changed_when: false

- name: Store elasticsearch version
  set_fact:
    elasticsearch_version_number: "{{ elasticsearch_get_installed_version.stdout | default('0.0.0', true) | trim }}"
    elasticsearch_running_version_number: >-
      {{
          (
            { 'version': { 'number': '0.0.0' } }
              | combine(elasticsearch_get_running_version.content | default('{}', true) | from_json)
          ).version.number | trim
      }}

- name: Print info about installed elasticsearch version
  when:
  debug:
    msg: |
      ========================================================
      =     Installed elasticsearch version identified      ==
      ========================================================

      Installed version number: {{ elasticsearch_version_number }}
      Running version number: {{ elasticsearch_running_version_number }}

- name: Fail for unsupported ansible version
  when: elasticsearch_version_number is version('5.0.0', '<')
  fail:
    msg: |
      ERROR! Invalid, undetected or unsupported elasticsearch version!

- name: Configure elasticsearch 6
  template:
    src: "{{ item.key }}"
    dest: /etc/elasticsearch/{{ item.value }}
    owner: root
    group: elasticsearch
  with_dict:
    es6-jvm.options: jvm.options
    elasticsearch.yml: elasticsearch.yml
    log4j2.properties: log4j2.properties
  notify: Restart elasticsearch
  when: >-
    elasticsearch_version_number is version('6.0.0', '>=')
      and elasticsearch_version_number is version('7.0.0', '<')

- name: Configure elasticsearch 7 or higher
  template:
    src: "{{ item.key }}"
    dest: /etc/elasticsearch/{{ item.value }}
    owner: root
    group: elasticsearch
  with_dict:
    es7-jvm.options: jvm.options
    elasticsearch.yml: elasticsearch.yml
    es7-log4j2.properties: log4j2.properties
  notify: Restart elasticsearch
  when: elasticsearch_version_number is version('7.0.0', '>=')

- name: Ensure elasticsearch systemd config override directory exists
  file:
    path: /etc/systemd/system/elasticsearch.service.d/
    state: directory

- name: Configure elasticsearch systemd service overrides
  template:
    src: systemd.service.overrides.conf
    dest: /etc/systemd/system/elasticsearch.service.d/mageops.conf
    trim_blocks: no
  notify:
    - Reload systemctl daemon
    - Restart elasticsearch

- name: Force update of elasticsearch plugins on version change
  block:
    - name: Get list of installed elasticsearch plugins
      command: /usr/share/elasticsearch/bin/elasticsearch-plugin list --silent
      register: elasticsearch_plugin_list_command

    - name: Remove current elasticsearch plugins so new version is installed
      command: "/usr/share/elasticsearch/bin/elasticsearch-plugin remove {{ item }} --verbose"
      args:
        removes:  "/usr/share/elasticsearch/plugins/{{ item }}"
      loop: "{{ elasticsearch_plugin_list_command.stdout_lines }}"
  when: >-
    elasticsearch_version_number != elasticsearch_running_version_number

- name: Install elasticsearch plugins
  command: "/usr/share/elasticsearch/bin/elasticsearch-plugin install {{ item }}"
  args:
    creates: "/usr/share/elasticsearch/plugins/{{ item }}"
  loop: "{{ elasticsearch_plugins }}"
  notify: Restart elasticsearch

- name: Ensure elasticsearch is started and enabled
  service:
    name: elasticsearch
    state: started
    enabled: yes

- name: Make sure any configuration changes are applied
  meta: flush_handlers

- name: Ensure elasticsearch is up
  wait_for:
    host: "{{ elasticsearch_network_host }}"
    port: "{{ elasticsearch_http_port }}"
    delay: 6
    timeout: 60

- name: Fix deprecation indexes
  shell: >-
    for index in $(curl -s http://localhost:9200/_cat/shards?format=json | jq -r '.[] | select(.state == "UNASSIGNED") | select(.index | startswith(".ds-.logs")) | .index');do echo -e "\nFixing $index: ";curl -s -XPUT "http://localhost:9200/$index/_settings" -H "Content-Type: application/json" --data '{"index": {"number_of_replicas": 0}}' ;done;echo
