- name: Create Launch Configuration
  ec2_lc:
    state: present
    name: "{{ autoscaling_launch_configuration_name }}"
    region: "{{ aws_region }}"
    assign_public_ip: "{{ autoscaling_assign_public_ip }}"
    instance_type: "{{ autoscaling_instance_type }}"
    image_id: "{{ autoscaling_instance_ami_id }}"
    security_groups: "{{ autoscaling_instance_security_groups }}"
    instance_profile_name: "{{ autoscaling_instance_iam_role }}"
    key_name: "{{ aws_ec2_ssh_key_name }}"
    instance_monitoring: False
    user_data: "{{ aws_ec2_instance_user_data }}"
    # This has zero costs on current-gen instances
    ebs_optimized: yes
  register: launch_configuration
  vars:
    aws_ec2_user_launch_script: "{{ autoscaling_instance_start_script }}"

- name: Create AutoScaling Group
  ec2_asg:
    state: present
    name: "{{ autoscaling_asg_name }}"
    region: "{{ aws_region }}"
    availability_zones: "{{ aws_app_asg_availability_zones | join(',') }}"
    launch_config_name: "{{ launch_configuration.name }}"
    load_balancers: "{{ autoscaling_loadbalancers | default(omit, true) }}"
    min_size: "{{ autoscaling_asg_min_size }}"
    max_size: >-
      {{
        autoscaling_asg_replace_with_check | ternary(
          autoscaling_asg_max_size + autoscaling_asg_desired_capacity,
          autoscaling_asg_max_size
        )
      }}
    desired_capacity: >-
      {{
        autoscaling_asg_replace_with_check | ternary(
          autoscaling_asg_desired_capacity * 2,
          autoscaling_asg_desired_capacity
        )
      }}
    vpc_zone_identifier: "{{ aws_vpc_subnet_id }}"
    default_cooldown: "{{ autoscaling_asg_cooldown }}"
    wait_for_instances: "{{ autoscaling_asg_wait_for_instances }}"
    wait_timeout: "{{ autoscaling_asg_wait_timeout }}"
    replace_all_instances: "{{ autoscaling_asg_replace_all }}"
    replace_batch_size: "{{ autoscaling_asg_replace_batch_size | default(omit) }}"
    termination_policies: "{{ autoscaling_asg_termination_policies }}"
    tags: "{{ aws_tags_default | combine(asg_name_tags, aws_tags_trait_immutable, autoscaling_instance_tags) | dict_to_tag_list }}"
  vars:
    asg_name_tags:
      - Name: "{{ autoscaling_asg_name }}"
  register: _aws_asg

- name: Handle bulk update of instances with health check
  block:
  - name: Make a list od instances for health check
    ec2_instance_info:
      region: "{{ aws_region }}"
      instance_ids: "{{ _aws_asg.instances }}"
    register: _aws_asg_instances

  - name: Wait for nodes to get up (ssh availability)
    wait_for:
      port: 22
      host: "{{ item.public_ip_address }}"
    loop: "{{ _aws_asg_instances.instances }}"
    loop_control:
      label: "{{ item.public_dns_name }}"
  rescue:
  # Retry because of race condition when it will return instance that is shutting down
  # The same thing as in block, because ansible doesn't allow to retry on block
  - name: Make a list od instances for health check
    ec2_instance_info:
      region: "{{ aws_region }}"
      instance_ids: "{{ _aws_asg.instances }}"
    register: _aws_asg_instances

  - name: Wait for nodes to get up (ssh availability)
    wait_for:
      port: 22
      host: "{{ item.public_ip_address }}"
    loop: "{{ _aws_asg_instances.instances }}"
    loop_control:
      label: "{{ item.public_dns_name }}"
  when: autoscaling_asg_replace_with_check

- name: Reduce AutoScaling Group - remove old instances
  ec2_asg:
    state: present
    name: "{{ autoscaling_asg_name }}"
    region: "{{ aws_region }}"
    min_size: "{{ autoscaling_asg_min_size }}"
    max_size: "{{ autoscaling_asg_max_size }}"
    desired_capacity: "{{ autoscaling_asg_desired_capacity }}"
    termination_policies: >-
      {{
        [ 'OldestLaunchConfiguration' ]
        + (autoscaling_asg_termination_policies is string | ternary(
              [ autoscaling_asg_termination_policies ],
              autoscaling_asg_termination_policies
            )
          )
      }}
    wait_for_instances: yes
    replace_all_instances: yes
  register: _aws_asg
  when: autoscaling_asg_replace_with_check

- name: Create ASG Termination Lifecycle Hook
  ec2_asg_lifecycle_hook:
    state: present
    region: "{{ aws_region }}"
    autoscaling_group_name: "{{ autoscaling_asg_name }}"
    lifecycle_hook_name: "{{ autoscaling_webnodedown_hook_name }}"
    transition: "autoscaling:EC2_INSTANCE_TERMINATING"
    heartbeat_timeout: 120
    default_result: CONTINUE
  when: autoscaling_webnodedown_hook_create

- name: Wait for desired capacity
  ec2_asg_info:
    name: "{{ autoscaling_asg_name }}"
    region: "{{ aws_region }}"
  register: _asg_info
  until: "_asg_info.results and (_asg_info.results[0].instances | length > 0) and (_asg_info.results[0].instances | length) == _asg_info.results[0].desired_capacity"
  retries: 300
  delay: 5
