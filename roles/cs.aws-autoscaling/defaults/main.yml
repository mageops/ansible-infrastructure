autoscaling_asg_cooldown: 300
autoscaling_webnodedown_hook_create: no
autoscaling_instance_start_script: ''
autoscaling_launch_configuration_name: "{{ autoscaling_asg_name }}-{{ ansible_date_time.epoch }}"
autoscaling_asg_replace_batch_size: 1
autoscaling_instance_tags: {}
autoscaling_asg_min_size: 1
autoscaling_asg_max_size: 1
autoscaling_asg_desired_capacity: 1
autoscaling_asg_tags: {}
autoscaling_asg_termination_policies: NewestInstance

# The minimum time to wait since the node was started until it's considered
# healthy, attached to the ASG (and next node can be replaced or refresh finished).
# Note: In other words - it's the time for the node to warm itself up.
autoscaling_healthcheck_grace_period: 30

### Built-in AWS rolling ASG instance refresh (update / replacement)
# The relative minimum amount of instances that must must be up and healthy
# int the ASG at any point in time druing the refresh. (90% is the AWS default)
#
# Note: Max capacity does *not* have to be adjusted. AWS ignores it when fullfilling
# the parameters defined here for the period of refresh.
#
# Couple of example cases:
# - If we have one instance then the default 90% will ensure that this instance
#   is not killed before the new one is up, healthy and after the grace period.
# - If this is set to 0 the all old instances are terminated *at once* and new
#   replacements started.
# - Assuming that there are 3 instances in the group and this param is set to
#   60%. The 60% out of 3 rounded up translates to 2, which means that
#   at any point in time there will be *at least* 2 healthy instances in the ASG.
#   Only one can be terminated / replaced at a time, so the full refresh will be
#   made in 3 steps replacing them one-by-one.
autoscaling_rolling_instance_refresh_min_healthy_percent: 90

# The extra time to wait for the instance to be warm before replacing the next
# one - *on top of* the value configured in `autoscaling_healthcheck_grace_period`.
autoscaling_rolling_instance_refresh_extra_warmup_grace_period: 15

# Max time to wait for the refresh to complete before giving up (15min default).
aws_asg_instance_refresh_progress_check_timeout: 900

# Delay of the retry loop that checks if the refresh has completed. Does not
# matter much, just the interval between lines are printed. In some CI systems
# that detects inacticvity you might want to adjust...
aws_asg_instance_refresh_progress_check_interval: 10

# Just common parameters to avoid copy-paster repetition
aws_asg_instance_refresh_cli_args_base: [
    --region,       "{{ aws_region }}",
    --output,       "json",
    --color,        "off",
    --no-paginate,
]
