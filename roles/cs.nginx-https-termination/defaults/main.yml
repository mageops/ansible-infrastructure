https_termination_varnish_upstream: "127.0.0.1:{{ varnish_port | default(80) }}"
https_termination_proxy_read_timeout: 90
https_termination_hide_varnish: yes
https_termination_nginx_extra_logging_conf_file: "{{ nginx_confd_dir }}/000-logging-extra.conf"
https_termination_ssl_dir: /etc/ssl
https_termination_certificate_dir: "{{ https_termination_ssl_dir }}/certs"
https_termination_private_dir: "{{ https_termination_ssl_dir }}/private"
https_termination_csr_dir: "{{ https_termination_ssl_dir }}/csr"
https_termination_letsencrypt_privkey_path: "{{ https_termination_private_dir }}/letsencrypt.pem"
https_termination_letsencrypt_challenge_dir: .well-known
https_termination_letsencrypt_challenge_root: "{{ nginx_www_dir }}/letsencrypt/challenge"

# Testing endpoint
# https_termination_letsencrypt_acme_directory: https://acme-staging.api.letsencrypt.org/directory
https_termination_letsencrypt_acme_directory: https://acme-v02.api.letsencrypt.org/directory
https_termination_letsencrypt_remaining_days: 10

# Additional logging configuration

# If enabled then will log cacheable html page response which were a varnish cache miss.
# This translates to the following conditions regarding the upstream response:
#   - header `Content-Type` starts with `text/html`
#   - header `Cache-Control` starts with `public`
#   - header `X-Magento-Cache-Debug` equals `MISS`
#   - reponse code is 200 OK
https_termination_page_cache_misses_logging: yes
https_termination_page_cache_misses_logfile: "{{ nginx_log_dir }}/access.page-cache-misses.json.log"

# An array of items each containing:
# - name - used internally for naming files
# - server_name - primary hostname; wildcard character will
#   skip creation of the `server_name` directive catching all hosts;
#   it cannot be wildcard if letsencrypt is enabled, it will be used for cert
#   generation
# - aliases - (optional) list of additional server names, also used for cert generation;
#   a single letsencrypt cert will be generated for each host, aliases will be added to
#   the SAN section
# - cert_path - (optional) local path to the certificate; if set this
#   file will be installed on server in the appropriate location
# - cert_key_path - (optional) local path to the certificate's private key;
#   if set this file will be installed on server in the appropriate location
# - letsencrypt - (optional, default: false) - if true then certs will be
#   generated using letsencrypt
# - extra_config - custom config block to add to the vhost file above
#   the auto-generated main `server` block
# - extra_vhost_config - custom config block to add inside the
#   the auto-generated main `server` directive
# - redirect_aliases - (default: no) - whether the aliases should be redirected
#   with 301 to the main `server_name`
# - permanent_path_redirect_map - a map of request patterns to redirect using 301
#
# Example config:
#
# https_termination_hosts:
#    - name: "https-termination-catch-all"
#      server_name: "*"
#      cert_path: "vars/certs/creativestyle.eu.cer"
#      cert_chain_path: "vars/certs/creativestyle.eu.chain.cer"
#      cert_key_path: "vars/certs/creativestyle.eu.key"
#      redirect_aliases: yes
#    - name: "multialias-letsencrypt"
#      letsencrypt: yes
#      server_name: "a-test.creativestyle.eu"
#      redirect_aliases: no
#      aliases:
#       - "b-test.creativestyle.eu"
#       - "c-test.creativestyle.eu"
#
# Warning! If you don't set cert_path or cert_key_path you have to provide
# the certificates using other means or nginx won't start.
#
# Warning! The private key should be encrypted with ansible vault if stored
# in the repository!
https_termination_hosts:
    - name: "default-https-termination"
      server_name: "*"

# Internal helper var for storing runtime computed configuration
https_termination_cfg_vhosts: []

