- name: Create RDS subnet group
  rds_subnet_group:
    state: present
    region: "{{ aws_region }}"
    name: "{{ aws_rds_subnet_group_name }}"
    description: "{{ aws_rds_subnet_group_name }}"
    subnets: "{{ aws_rds_subnet_group_subnets }}"

- name: Enable collecting slow log
  set_fact:
    aws_rds_param_group_params: "{{ aws_rds_param_group_params | combine({'slow_query_log': 1, 'long_query_time': aws_rds_slowlog_time}, recursive=True) }}"
    aws_rds_cloudwatch_logs_exports: "{{ aws_rds_cloudwatch_logs_exports + [ 'slowquery' ] }}"
  when: aws_rds_slowlog_enabled

- name: Create RDS parameter group
  rds_param_group:
    state: present
    region: "{{ aws_region }}"
    name: "{{ aws_rds_param_group_name }}"
    description: "{{ aws_rds_param_group_desc }}"
    engine: "{{ aws_rds_param_group_engine }}"
    tags: "{{ aws_tags_default }}"
    params: "{{ aws_rds_param_group_params | default(omit) }}"

- name: Create RDS encryption key
  aws_kms:
    alias: "{{ aws_rds_encryption_key_name }}"
    region: "{{ aws_region }}"
    tags: "{{ aws_tags_default | combine(aws_tags_kms_database) }}"
  when: aws_rds_storage_encrypt and aws_rds_dedicated_encryption_key

- name: Wait for active rds modifications to finish
  rds_instance_info:
    region: "{{ aws_region }}"
    db_instance_identifier: "{{ aws_rds_instance_name }}"
  register: aws_rds_current
  retries: 600
  delay: 5
  until: (aws_rds_current.instances|length) == 0 or aws_rds_current.instances[0].db_instance_status != "modifying"

- name: Check current RDS configuration
  rds_instance_info:
    region: "{{ aws_region }}"
    db_instance_identifier: "{{ aws_rds_instance_name }}"
  register: aws_rds_current

- name: Update RDS instance class before applying full configuration (workaround)
  block:
    - name: Update RDS instance class before applying full configuration (workaround)
      shell: |
            aws \
                --region '{{ aws_region }}' \
            rds modify-db-instance \
              --db-instance-identifier='{{ aws_rds_instance_name }}' \
              --db-instance-class='{{ aws_rds_instance_type }}' \
              --apply-immediately
    - name: Wait for modification to start
      rds_instance_info:
        region: "{{ aws_region }}"
        db_instance_identifier: "{{ aws_rds_instance_name }}"
      register: aws_rds_wait_start_result
      retries: 20
      delay: 3
      until: aws_rds_wait_start_result.instances[0].db_instance_status == "modifying" or aws_rds_wait_start_result.instances[0].pending_modified_values.db_instance_class is not defined
    - name: Wait for modification to finish
      rds_instance_info:
        region: "{{ aws_region }}"
        db_instance_identifier: "{{ aws_rds_instance_name }}"
      register: aws_rds_wait_finish_result
      retries: 600
      delay: 5
      until: aws_rds_wait_finish_result.instances[0].db_instance_status == "available"
  when: (aws_rds_current.instances|length) > 0 and aws_rds_current.instances[0].db_instance_class != aws_rds_instance_type


# When we have known upgrade path:
# we create temporary parameter group for specific db version
# we upgrade database to next engine version
# then we procees with usual rds provisioning - this will switch to normal parameter group
# we remowe all created temporary parameter groups
- name: Set upgrade plan
  set_fact:
    aws_rds_upgrade_plan: |
      {{ aws_rds_upgrade_path[aws_rds_db_engine][
        aws_rds_current.instances[0].engine_version.split('.')[0]
        + "."
        + aws_rds_current.instances[0].engine_version.split('.')[1]
      ][aws_rds_db_engine_version] }}
  when: |
    aws_rds_upgrade_path[aws_rds_db_engine] is defined
    and aws_rds_current.instances|length > 0
    and aws_rds_upgrade_path[aws_rds_db_engine][
      aws_rds_current.instances[0].engine_version.split('.')[0]
      + "."
      + aws_rds_current.instances[0].engine_version.split('.')[1]
    ] is defined
    and aws_rds_upgrade_path[aws_rds_db_engine][
      aws_rds_current.instances[0].engine_version.split('.')[0]
      + "."
      + aws_rds_current.instances[0].engine_version.split('.')[1]
    ][aws_rds_db_engine_version] is defined

- name: Print upgrade plan
  debug:
    msg: |
      Upgrade plan from {{ aws_rds_current.instances[0].engine_version }} to {{ aws_rds_db_engine_version }}
        {{ aws_rds_current.instances[0].engine_version }} --> {{ " --> ".join(aws_rds_upgrade_plan) }}
  when: aws_rds_upgrade_plan|length > 0

- name: Upgrade MySQL/MariaDB RDS engine
  include_tasks: upgrade_iteration.yml
  loop: "{{ aws_rds_upgrade_plan }}"

- name: Create MySQL/MariaDB RDS
  rds_instance:
    region: "{{ aws_region }}"
    publicly_accessible: "{{ aws_rds_publicly_accessible }}"
    db_instance_identifier: "{{ aws_rds_instance_name }}"
    engine: "{{ aws_rds_db_engine }}"
    db_parameter_group_name: "{{ aws_rds_param_group_name }}"
    engine_version: "{{ aws_rds_db_engine_version }}"
    allocated_storage: "{{ aws_rds_storage_size }}"
    db_instance_class: "{{ aws_rds_instance_type }}"
    master_username: "{{ mageops_mysql_root_user }}"
    master_user_password: "{{ mageops_mysql_root_pass }}"
    db_subnet_group_name: "{{ aws_rds_subnet_group_name }}"
    vpc_security_group_ids: "{{ aws_rds_security_groups }}"
    backup_retention_period: "{{ aws_rds_backup_retention }}"
    preferred_backup_window: "{{ aws_rds_backup_window }}"
    preferred_maintenance_window: "{{ aws_rds_maintenance_window }}"
    auto_minor_version_upgrade: "{{ aws_rds_auto_minor_version_upgrade }}"
    allow_major_version_upgrade: "{{ aws_rds_allow_major_version_upgrade }}"
    tags: "{{ aws_tags_default | combine(aws_tags_role_database, aws_tags_role_mysql_database, aws_tags_node_mysql) }}"
    availability_zone: "{{ aws_rds_availability_zone }}"
    storage_encrypted: "{{ aws_rds_storage_encrypt }}"
    kms_key_id: "{{ aws_rds_encryption_key_name if aws_rds_storage_encrypt and aws_rds_dedicated_encryption_key else omit }}"
    enable_performance_insights: "{{ aws_rds_performance_insights }}"
    performance_insights_retention_period: "{{ aws_rds_performance_insights_retention_period if aws_rds_performance_insights else omit }}"
    performance_insights_kms_key_id: "{{ aws_rds_encryption_key_name if aws_rds_storage_encrypt and aws_rds_dedicated_encryption_key else omit }}"
    enable_cloudwatch_logs_exports: "{{ aws_rds_cloudwatch_logs_exports }}"
    apply_immediately: yes
    wait: yes

- name: Remove temporary parameter groups used for engine upgrade
  rds_param_group:
    state: absent
    name: "{{ item }}"
  loop: "{{ aws_rds_temporary_parameter_groups }}"
