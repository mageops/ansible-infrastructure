- name: Compute PHP package list
  set_fact:
    php_packages: >-
      {{
          (
            php_packages + php_extra_packages | default([])
              + php_install_fpm_package | ternary([php_fpm_package], [])
              + php_debug_ini_enable | ternary([php_xdebug_package], [])
          ) | unique
      }}

- name: Get the installed package list
  package_facts:
    manager: auto

- name: Set fact about current PHP version
  vars:
    php_installed_version_full: "{{ ansible_facts.packages[php_core_package][0]['version'] | default(false) }}"
  set_fact:
    php_version: "{{ php_version | string }}"
    php_installed_version_full: >-
      {{
          php_installed_version_full | ternary(
            php_installed_version_full | string,
            false
          )
      }}
    php_installed_version: >-
      {{
          php_installed_version_full | ternary(
            (php_installed_version_full | default('0.0', true)).split('.')[:2] | join('.'),
            false
          )
      }}

- debug: var=php_version
- debug: var=php_installed_version
- debug: var=php_installed_version_full

- name: Set fact about PHP installation mode
  set_fact:
    php_install_mode: >-
      {{
          php_installed_version_full | ternary(
            php_version is version(php_installed_version | default('0.0', true), operator='lt') | ternary (
              'downgrade',
              'upgrade'
            ),
            'install'
          )
      }}

- name: Print information about PHP installation
  debug:
    msg: |
      ==================================================
      ==          PHP installation information        ==
      ==================================================

      {{ ( '-> ' ~ php_install_mode | upper ~ ' <-' ) | center(50) }}

        {% if php_install_mode in ['upgrade', 'downgrade'] -%}
        Previous version: {{ php_installed_version }} ({{ php_installed_version_full }})
        {% endif -%}
        Requested version: {{ php_version }}
        Requested packages:
        {{ php_packages | to_nice_yaml | indent(width=2) }}

      ------------------------------------------------

- name: Upgrade PHP packages
  yum:
    name: 'php*'
    update_cache: yes
    update_only: yes
    state: latest
  when: php_install_mode == 'upgrade'

# Unforunately the following task causes ansible to *hang* so we use a command
# - name: Downgrade PHP packages
#     yum:
#     name: 'php*'
#     update_cache: yes
#     allow_downgrade: yes
#     state: present
- name: Downgrade PHP packages
  command:
    argv: [yum, -y, downgrade, php]
    warn: no
  when: php_install_mode == 'downgrade'

- name: Ensure requested PHP packages are installed
  yum:
    name: "{{ php_packages }}"
    state: present

- name: Add root as required PHP user
  set_fact:
    php_opcache_file_cache_users: "{{ (  [ 'root' ] + php_opcache_file_cache_users ) | unique }}"

- name: Get PHP users homes
  getent:
    database: passwd
    key: "{{ item }}"
    fail_key: no
  register: php_users_getent_passwd
  loop: "{{ php_opcache_file_cache_users }}"

- name: Compute PHP users home list
  set_fact:
    php_opcache_file_cache_users_homes: >-
      {{
          php_opcache_file_cache_users | zip (
            php_users_getent_passwd.results
              | map(attribute='ansible_facts.getent_passwd')
              | map('dict2items')
              | map('first')
              | map(attribute='value')
              | map(attribute=4)
          ) | selectattr(1, 'defined') | list
      }}

- name: Configure PHP tmpfiles
  template:
    src: php.tmpfiles.conf
    dest: /etc/tmpfiles.d/php.conf
  register: tmpfiles_config

- name: Ensure PHP tmpfiles config is applied
  command: systemd-tmpfiles --create
  when: tmpfiles_config is changed

- name: Configure Web Request PHP INI
  template:
    src: php-web.ini
    dest: /etc/php.ini
  notify: PHP Configuration Changed

- name: Configure PHP CLI INI
  template:
    src: php-cli.ini
    dest: /etc/php-cli.ini
    force: yes
  notify: PHP Configuration Changed

- name: Configure debug
  block:
  - name: Configure separate PHP Debug INI
    template:
      src: php-xdebug.ini
      dest: "{{ php_debug_ini_path }}"
    notify: PHP Configuration Changed

  - name: Configure separate PHP Cli Debug INI
    template:
      src: php-xdebug.ini
      dest: "{{ php_cli_debug_ini_path }}"
    vars:
      php_xdebug_remote_log: ''
    notify: PHP Configuration Changed

  - name: Add php xdebug cli
    template:
      src: php-xdebug
      dest: "/usr/local/bin/php-xdebug"
      mode: "0755"
  when: php_debug_ini_enable

# This is needed so specific /etc/php*.ini settings are not
# overrided by package provided defaults.
- name: Disable unwanted PHP INI overrides
  copy:
    content: |
      ; WARNING! Do not add any settings here!
      ;
      ; This file is empty on purpose to allow
      ; settings for this module to be set in
      ; the main /etc/php*.ini files. This is
      ; a must since /etc/php.d/*.ini files
      ; always take precedence and thus disallow
      ; any conditional customization for core
      ; modules.
    dest: "/etc/php.d/{{ item }}.ini"
    force: yes
  with_items: >-
    {{
       ['10-opcache']
        + php_debug_ini_enable | ternary(['15-xdebug'], [])
    }}
  notify: PHP Configuration Changed

- name: Create tmpfiles maintenance service
  template:
    src: php.tmpfiles.service
    dest: /etc/systemd/system/php-tmpfiles.service
  register: php_tmpfiles_service_config
  notify: PHP Configuration Changed

# We need to ensure the new [Install] section gets processed so we need reenabling
# also we get a restart so any new directories get created
- name: Disable tmpfiles maintenance service to ensure it is reenabled
  systemd:
    enabled: no
    started: no
    daemon_reload: yes
    name: php-tmpfiles
  when: php_tmpfiles_service_config is changed
  
- name: Ensure tmpfiles maintenance service is enabled
  systemd:
    enabled: yes
    name: php-tmpfiles
