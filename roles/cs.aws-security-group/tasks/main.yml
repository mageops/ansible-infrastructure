- name: Create security group for Varnish lambda
  ec2_group:
    name: "{{ aws_security_group_lambda_ssh_name }}"
    description: "{{ mageops_app_name }} Varnish backend update lambda security group"
    region: "{{ aws_region }}"
    vpc_id: "{{ aws_vpc_id }}"
    tags: "{{ aws_tags_default | combine(ec2_sg_tags) }}"
  vars:
    ec2_sg_tags:
      Name: "{{ aws_security_group_lambda_ssh_name }}"
  register: aws_security_group_lambda_ssh

- name: Create security group for sftp node
  ec2_group:
    name: "{{ aws_security_group_sftp_name }}"
    description: "{{ mageops_app_name }} sftp node"
    region: "{{ aws_region }}"
    vpc_id: "{{ aws_vpc_id }}"
    tags: "{{ aws_tags_default | combine(ec2_sg_tags) }}"
  vars:
    ec2_sg_tags:
      Name: "{{  aws_security_group_sftp_name  }}"
  register: aws_security_group_sftp

- name: Create SSH group for access from the office
  ec2_group:
    name: "{{ aws_security_group_ssh_name }}"
    description: "{{ mageops_app_name }} SSH access security group"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        ports: 22
        cidr_ip: "{{ mageops_trusted_cidr_blocks }}"
    vpc_id: "{{ aws_vpc_id }}"
    tags: "{{ aws_tags_default | combine(ec2_sg_tags) }}"
  vars:
    ec2_sg_tags:
      Name: "{{ aws_security_group_ssh_name }}"
  register: aws_security_group_ssh

- name: Create security group for load balancer
  ec2_group:
    name: "{{ aws_security_group_lb_name }}"
    description: "{{ mageops_app_name }} Load balancer security group"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        ports:
          - 80
          - 443
        cidr_ip: "0.0.0.0/0"
      - proto: tcp
        ports: ["{{ goaccess_vhost_port }}"]
        cidr_ip: "{{ mageops_trusted_cidr_blocks }}"
    vpc_id: "{{ aws_vpc_id }}"
    tags: "{{ aws_tags_default | combine(ec2_sg_tags) }}"
  vars:
    ec2_sg_tags:
      Name: "{{ aws_security_group_lb_name }}"
  register: aws_security_group_lb


- name: Create security group for Varnish
  ec2_group:
    name: "{{ aws_security_group_varnish_name }}"
    description: "{{ mageops_app_name }} - allows for connection between Varnish servers"
    region: "{{ aws_region }}"
    purge_rules: no
    rules:
      - proto: tcp
        ports: "{{ mageops_varnish_port }}"
        group_name: "{{ aws_security_group_varnish_name }}"
      - proto: tcp
        ports: "{{ mageops_varnish_port }}"
        group_name: "{{ aws_security_group_lb_name }}"
      - proto: tcp
        ports: 22
        group_name: "{{ aws_security_group_lambda_ssh_name }}"
      - proto: tcp
        ports: "{{ mageops_php_xdebug_remote_proxy_port }}"
        group_name: "{{ aws_security_group_app_name }}"
    vpc_id: "{{ aws_vpc_id }}"
    tags: "{{ aws_tags_default | combine(ec2_sg_tags) }}"
  vars:
    ec2_sg_tags:
      Name: "{{ aws_security_group_varnish_name }}"
  register: aws_security_group_varnish

- name: Create security group for webnodes
  ec2_group:
    name: "{{ aws_security_group_app_name }}"
    description: "{{ mageops_app_name }} Webnodes security group"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        ports:
          - "{{ mageops_varnish_backend_port }}"
        group_name: "{{ aws_security_group_varnish_name }}"
    vpc_id: "{{ aws_vpc_id }}"
    tags: "{{ aws_tags_default | combine(ec2_sg_tags) }}"
  vars:
    ec2_sg_tags:
      Name: "{{ aws_security_group_app_name }}"

  register: aws_security_group_app

- name: Create security group for RDS
  ec2_group:
    name: "{{ aws_security_group_rds_name }}"
    description: "{{ mageops_app_name }} RDS security group"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        ports: 3306
        group_name: "{{ aws_security_group_app_name }}"
      - proto: tcp
        ports: 3306
        cidr_ip: "{{ mageops_trusted_cidr_blocks }}"
    vpc_id: "{{ aws_vpc_id }}"
    tags: "{{ aws_tags_default | combine(ec2_sg_tags) }}"
  vars:
    ec2_sg_tags:
      Name: "{{ aws_security_group_rds_name }}"
  register: aws_security_group_rds
  when: aws_security_group_rds_create

- name: Create security group for Redis
  ec2_group:
    name: "{{ aws_security_group_redis_name }}"
    description: "{{ mageops_app_name }} Redis security group"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        ports:
            - "{{ mageops_redis_port }}"
            - "{{ mageops_redis_sessions_port }}"
        group_name: "{{ aws_security_group_app_name }}"
      # TODO: We have reached SG limits - that's why rabbitmq
      # is added to redis SG. The whole SG approach needs to be
      # rethinked and refactored - probably we should use subnets
      # instead.
      - proto: tcp
        ports:
          - "{{ rabbitmq_amqp_port }}"
          - "{{ rabbitmq_http_port }}"
        group_name: "{{ aws_security_group_app_name }}"
    vpc_id: "{{ aws_vpc_id }}"
    tags: "{{ aws_tags_default | combine(ec2_sg_tags) }}"
  vars:
    ec2_sg_tags:
      Name: "{{ aws_security_group_redis_name }}"
  register: aws_security_group_redis
  when: aws_security_group_redis_create

- name: Create security group for Elastic
  ec2_group:
    name: "{{ aws_security_group_elasticsearch_name }}"
    description: "{{ mageops_app_name }}  Elasticsearch security group"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        ports: "{{ elasticsearch_http_port }}"
        group_name: "{{ aws_security_group_app_name }}"
      - proto: tcp
        ports: "{{ elasticsearch_http_port }}"
        cidr_ip: "{{ mageops_trusted_cidr_blocks }}"
    vpc_id: "{{ aws_vpc_id }}"
    tags: "{{ aws_tags_default | combine(ec2_sg_tags) }}"
  vars:
    ec2_sg_tags:
      Name: "{{ aws_security_group_elasticsearch_name }}"
  register: aws_security_group_elastic
  when: aws_security_group_elasticsearch_create

- name: Create security group for EFS
  ec2_group:
    name: "{{ aws_security_group_efs_name }}"
    description: "{{ mageops_app_name }} EFS security group"
    region: "{{ aws_region }}"
    purge_rules: no
    rules:
      - proto: tcp
        ports: [2049]
        group_name: "{{ aws_security_group_app_name }}"
      - proto: tcp
        ports: [2049]
        group_name: "{{ aws_security_group_sftp_name }}"
    vpc_id: "{{ aws_vpc_id }}"
    tags: "{{ aws_tags_default | combine(ec2_sg_tags) }}"
  vars:
    ec2_sg_tags:
      Name: "{{ aws_security_group_efs_name }}"
  register: aws_security_group_efs

- name: Allow app to access varnish
  ec2_group:
    name: "{{ aws_security_group_varnish_name }}"
    description: "{{ mageops_app_name }} - allows for connection between Varnish servers"
    region: "{{ aws_region }}"
    purge_rules: no
    rules:
      - proto: tcp
        ports: "{{ mageops_varnish_port }}"
        group_name: "{{ aws_security_group_app_name }}"
    vpc_id: "{{ aws_vpc_id }}"
    tags: "{{ aws_tags_default | combine(ec2_sg_tags) }}"
  vars:
    ec2_sg_tags:
      Name: "{{ aws_security_group_varnish_name }}"


