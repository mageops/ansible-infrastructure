
- name: Get latest version of lauch template
  command:
    argv: >
    aws ec2 describe-launch-templates --launch-template-names {{ autoscaling_launch_template_name }}
  register: ec2_launch_template_latest_version_query

-name: Set facts default version
  set_fact:
    ec2_launch_template_latest_version: {{ ec2_launch_template_latest_version_query.stdout | from_json | json_query(LatestVersionNumber) }}

-name: Set facts max version to delete
   set_fact:
    max-version: {{ ec2_launch_template_latest_version }} - {{ aws_ec2_cleanup_lt_to_keep }}

- name: Get list of App AMIs
  command:
    cmd:
    aws ec2 describe-launch-template-versions --launch-template-name {{ autoscaling_launch_template_name }} --max-version {{ max-version }}
  register: ec2_launch_template_version_list_query

-name: Set facts AMIs to delete
  set_fact:
    ec2_ami_version_list: {{ ec2_launch_template_version_list_query | from_json | json_query(ImageId) }}

-name: Set facts Launch Template to delete
  set_fact:
    ec2_launch_template_version_list: {{ ec2_launch_template_version_list_query | from_json | json_query(VersionNumber) }}


- name: "Remove AMIs not longer required"
  ec2_ami:
     region: "{{ aws_region }}"
     state: absent
     delete_snapshot: yes
     image_id: "{{ item.image_id }}"
  with_items: "{{ ec2_ami_version_list }}"

- name: Delete obsoled version of launch template
  command:
    cmd: aws ec2 delete-launch-template-versions --launch-template-name {{ autoscaling_launch_template_name }} --versions {{ item.VersionNumber }}
  loop: "{{ ec2_launch_template_version_list.VersionNumber }}"

#- name: Set list of AMI/LC ids to_keep
#  set_fact:
#    _aws_ec2_cleanup_ami_ids_to_keep: "{{ _aws_ec2_cleanup_lcs_to_keep | map(attribute='image_id')|list | unique }}"
#
#- debug:
#    msg: "Keeping {{ _aws_ec2_cleanup_ami_ids_to_keep | count }} AMIs: {{ _aws_ec2_cleanup_ami_ids_to_keep | join(', ') }}"

#- name: Get list of App AMIs
#  ec2_ami_info:
#    region: "{{ aws_region }}"
#    owner: self
#    filters: "{{ aws_tags_base | prefix_keys('tag:') | combine(aws_tags_role_app_filter) }}"
#  vars:
 #   aws_tags_role_app_filter: "{{ aws_tags_role_app | prefix_keys('tag:') }}"
 # register: _aws_ec2_cleanup_env_amis#

#- name: "Remove AMIs not longer required"
#  ec2_ami:
#     region: "{{ aws_region }}"
#     state: absent
#     delete_snapshot: yes
#     image_id: "{{ item.image_id }}"
#  with_items: "{{ _aws_ec2_cleanup_env_amis.images }}"
#  when:
#    - item is not skipped
#    - item.image_id not in _aws_ec2_cleanup_ami_ids_to_keep
