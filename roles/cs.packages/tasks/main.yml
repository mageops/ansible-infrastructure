
- name: Get last package maintenance timestamp
  slurp:
    path: "{{ packages_maintenance_marker_path }}"
  register: packages_maintenance_last_timestamp
  changed_when: false
  failed_when: no

- name: Perform one-time package maintenance
  block:
    - name: Make sure banned packages are not present
      dnf:
        name: "{{ packages_remove | default([]) }}"
        state: absent
      when: packages_remove is defined and packages_remove | length

    - name: Store information that package maintenance was done
      copy:
        content: "{{ ansible_date_time.epoch }}"
        dest: "{{ packages_maintenance_marker_path }}"
  when: >-
    packages_maintenance_last_timestamp.content is not defined or (
      (
        packages_maintenance_last_timestamp.content | int - ansible_date_time.epoch | int
      ) > packages_maintenance_interval | int
    )

# Retries here are required because of funky fastly caching
# and sometimes selected fastly mirror is not resolving some packages (404)
# dns caches responses for 30s so we need this much to get another change at getting different mirror
- name: "Install packages"
  dnf:
    name: "{{ packages_install }}"
    state: present
  register: packages_install_command
  retries: 10
  delay: 30
  until: not packages_install_command is failed

- name: "Ensure all packages are up to date"
  dnf:
    name: '*'
    state: latest
    exclude: "{{ packages_full_update_exclude }}"
  when: packages_full_update
  register: packages_update_command
  retries: 10
  delay: 30
  until: not packages_update_command is failed
