- name: Perform AWS API tasks
  delegate_to: localhost
  become: no
  block:
    
    - name: Create EFS
      efs:
        state: present
        wait: yes
        name: "{{ efs_name }}"
        tags: >-
           {{ aws_tags_default |
              combine(
                aws_tags_role_storage,
                aws_tags_role_efs_storage,
                efs_tags,
                efs_tags_name) }}
        performance_mode: "{{ efs_performance_mode }}"
        region: "{{ aws_region }}"
        targets: "{{ efs_aws_subnet_ids | jq(efs_targets_jq) }}"
      vars:
        efs_targets_jq: >-
          map({
            subnet_id: ., 
            security_groups: [
              "{{ efs_aws_security_group_id }}"
            ]
          })
        efs_tags_name:
          Name: "{{ efs_name }}"
      register: _aws_efs

    - name: Set EFS LifeCycle Policies
      when: efs_lifecycle_policies and efs_lifecycle_policies | length > 0
      command: >-
        aws efs put-lifecycle-configuration 
          --file-system-id '{{ _aws_efs.efs.file_system_id }}'
          --lifecycle-policies '{{ efs_lifecycle_policies | to_json }}'

- name: Install AWS EFS utils
  yum:
    name:
        - stunnel
        - nfs-utils
        - "{{ efs_utils_package }}"
    state: present

- name: Make sure root mount points exists
  file:
    path: "{{ efs_root_mountpoint }}"
    state: directory

# EFS Once created takes a really long time to become available
# hence the retries
- name: Configure root mount
  mount:
    boot: yes
    src: "{{ _aws_efs.efs.file_system_id }}:/"
    path: "{{ efs_root_mountpoint }}"
    fstype: efs
    state: mounted
    opts: "defaults,{{ efs_mount_opts }}"
  register: efs_root_mount
  until: efs_root_mount is not failed
  retries: 300
  delay: 30

- name: Make sure remote mount points exist with proper permissions
  file:
    path: "{{ efs_root_mountpoint }}{{ item.remote_path }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: 0770
    state: directory
  with_items: "{{ efs_mounts }}"

- name: Make sure local mount points exists
  file:
    path: "{{ item.local_mountpoint }}"
    state: directory
  with_items: "{{ efs_mounts }}"

- name: Check if target directories are already mounted
  command: "mountpoint {{ item.local_mountpoint }}"
  register: _efs_local_mountpoints
  failed_when: no
  changed_when: no
  with_items: "{{ efs_mounts }}"

- name: Copy any preexisting files before we mount over these directories (but do not overwrite existing)
  shell: "rsync --archive --ignore-existing {{ item[0].local_mountpoint }}/ {{ efs_root_mountpoint }}{{ item[0].remote_path }}/"
  when: item[1].rc != 0
  with_together:
    - "{{ efs_mounts }}"
    - "{{ _efs_local_mountpoints.results }}"

- name: Configure mounts
  mount:
    boot: yes
    src: "{{ _aws_efs.efs.file_system_id }}:{{ item.remote_path }}"
    path: "{{ item.local_mountpoint }}"
    fstype: efs
    state: mounted
    opts: "defaults,{{ efs_mount_opts }}"
  with_items: "{{ efs_mounts }}"

# Warning, this has to be done post-mount!
- name: Ensure mount permissions
  file:
    path: "{{ item.local_mountpoint }}"
    state: directory
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: 0770
  with_items: "{{ efs_mounts }}"

- name: Make sure EFS is always in case the filesystem it's mounted over disappears (S3FS?)
  cron:
    name: "Ensure {{ item.local_mountpoint }} is mounted"
    job: "/bin/bash -c 'mountpoint {{ item.local_mountpoint }} || mount {{ item.local_mountpoint }}'"
  with_items: "{{ efs_mounts }}"