#!/usr/bin/env bash
set -euo pipefail

source "$(dirname "${BASH_SOURCE[0]}")/../lib/mageops/config.bash"
if [ "${config__aws_enabled}" = "yes" ];then
    source "$(dirname "${BASH_SOURCE[0]}")/../lib/mageops/libaws.bash"
    source "$(dirname "${BASH_SOURCE[0]}")/../lib/mageops/libmageops.bash"
    source "$(dirname "${BASH_SOURCE[0]}")/../lib/mageops/libfeatures.bash"
fi
source "$(dirname "${BASH_SOURCE[0]}")/../lib/mageops/libdynamicnode.bash"

main::main() {
    local cmd=${1:-}

    case $cmd in
    is_cron_node)
        main::aws_only
        if [ $# != 1 ];then main::help; fi
        main::is_cron_node || exit 1
    ;;
    is_tag_present)
        main::aws_only
        if [ $# != 2 ];then main::help; fi
        local tag=$2
        main::is_tag_present "$tag" || exit 1
    ;;
    get_tag_value)
        main::aws_only
        if [ $# != 2 ];then main::help; fi
        local tag=$2
        main::get_tag_value "$tag" || exit 1
    ;;
    current_instance_id)
        main::aws_only
        if [ $# != 1 ];then main::help; fi
        main::current_instance_id || exit 1
    ;;
    current_region)
        main::aws_only
        if [ $# != 1 ];then main::help; fi
        main::current_region || exit 1
    ;;
    set_feature_flag)
        main::aws_only
        if [ $# != 3 ];then main::help; fi
        local feature=$2
        local value=$3
        main::set_feature_flag "$feature" "$value"
    ;;
    read_feature_flag)
        main::aws_only
        if [ $# != 2 ];then main::help; fi
        local feature=$2
        main::read_feature_flag "$feature"
    ;;
    is_feature_flag_set)
        main::aws_only
        if [ $# != 2 ];then main::help; fi
        local feature=$2
        main::is_feature_flag_set "$feature" || exit 1
    ;;
    apply_features)
        main::aws_only
        if [ $# != 1 ];then main::help; fi
        main::apply_features
    ;;
    register_dynamic_bakcend)
        if [ $# != 2 ];then main::help; fi
        local backend_name=$2
        main::register_dynamic_backend "$backend_name" || exit 1
    ;;
    *) main::help ;;
    esac
}

main::eprintln() {
    echo "$@" >&2
}

main::panic() {
    main::eprintln "ERROR: " "$@"
    exit 1
}

main::is_cron_node() {
    mageops::assert_tag_value "Cron" "yes" || return 1
}

main::is_tag_present() {
    local tag=$1
    main::assert_aws_cli
    mageops::is_tag_exists "$tag" || return 1
}

main::get_tag_value() {
    local tag=$1
    main::assert_aws_cli
    mageops::get_tag_value "$tag" || return 1
}

main::assert_aws_cli() {
    command -v aws &>/dev/null && return 0
    main::panic "aws cli is not installed"
}

main::current_instance_id() {
    main::assert_aws_cli
    local id
    id=$(mageops::get_current_instance_id) || return 1
    echo "$id"
}

main::current_region() {
    main::assert_aws_cli
    local region
    region=$(mageops::get_current_region) || return 1
    echo "$region"
}

main::set_feature_flag() {
    local feature=$1
    local value=$2

    main::eprintln "Updating feature flag $feature to $value..."
    features::update_feature_flag "$feature" "$value"
    main::eprintln "OK"
}

main::is_feature_flag_set() {
    local feature=$1

    features::is_flag_set "$feature" || return 1
}

main::read_feature_flag() {
    local feature=$1

    features::read_feature_flag "$feature" ""
}

main::apply_features() {
    features::update_host_state
}

main::register_dynamic_backend() {
    local backend_name=$1

    dynamicnode::register_node "$backend_name" || main::panic "Failed to register this node as dynamic backend"
}

main::aws_only() {
    if [ "${config__aws_enabled}" != "yes" ];then
        main::panic "This command is only available on aws environment"
    fi
}

main::dynamic_node_only() {
    if [ "${config__dynamicnode_enabled}" != "yes" ];then
        main::panic "This command is only available on nodes with dynamic node feature configured"
    fi
}

main::help() {
    local contains_commands=0
    main::eprintln "  $0 <cmd>"
    main::eprintln ""
    main::eprintln "Where cmd is one of:"
    if [ "${config__aws_enabled}" = "yes" ];then
        contains_commands=1
        main::eprintln "  is_cron_node                         Checks if there is tag 'Cron' with value 'yes'"
        main::eprintln "                                       status code 0 means tag present, 1 means missing tag or"
        main::eprintln "                                       other error"
        main::eprintln "  is_tag_present <tag_name>            Checks if specified tag name is set"
        main::eprintln "                                       status code 0 means tag present, 1 means missing tag or"
        main::eprintln "                                       other error"
        main::eprintln "  get_tag_value <tag_name>             Reads value assigned to tag"
        main::eprintln "  current_instance_id                  Reads current ec2 instance id"
        main::eprintln "  current_region                       Reads current ec2 region name"
        main::eprintln "  set_feature_flag <feature> <value>   Update feature flag value"
        main::eprintln "  read_feature_flag <feature>          Reads current feature flag value"
        main::eprintln "  is_feature_flag_set <feature>        Checks if there is any value set for feature flag"
        main::eprintln "                                       status code 0 means flag is set, 1 otherwise"
        main::eprintln "  apply_features                       Apply feature updates to this host"
    fi
    if [ "${config__dynamicnode_enabled}" = "yes" ];then
        contains_commands=1
        main::eprintln "  register_dynamic_bakcend <name>      Register this node as dynamic backend with <name>."
        main::eprintln "                                       This command need to be repeated constandly to keep"
        main::eprintln "                                       this node in list."
    fi
    if [ "${contains_commands}" = "0" ];then
        main::eprintln "  Sorry but this node does not contain any usable commands"
    fi
    main::eprintln ""
    main::eprintln " Mageops cli tools"
    main::eprintln "  (c) Creativestyle 2020-2021"
    exit 1
}

main::main "$@"
