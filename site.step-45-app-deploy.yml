- import_playbook: site.common.group-current-hosts.yml

- hosts: app:&current:!immutable
  pre_tasks:
    - name: Release artifact sanity check failed
      fail:
        msg: |
          ====================================================
          ==   FATAL! No valid release artifacts were found ==
          ====================================================
      
            No valid composer.json has been found at:
            {{ deploy_artifact_composer_json_local_path }}

            TIPS:
            - Is local artifact dir path is correct?
            - Was the project built at least once successfully?
        
          ----------------------------------------------------
      when: deploy_artifact_composer_json_data.require is not defined

    - name: Print artifact composer package information
      debug:
        msg: |
          =============================================
          ==  Artifact Composer Package Information  ==
          =============================================

          {% if deploy_artifact_composer_json_data.name is defined -%}
          Main Package: {{ deploy_artifact_composer_json_data.name }}
          {% endif %}

          Dependencies:
          {{ deploy_artifact_composer_json_data.require | to_nice_yaml }}

          ---------------------------------------------

    - name: Check if previous release exists
      stat:
        path: "{{ deploy_current_release_dir }}"
      failed_when: no
      register: _current_release_check

    - name: Set previous release existence fact
      set_fact:
        deploy_previous_release_exists: "{{ _current_release_check.stat is defined and _current_release_check.stat.islnk is defined and _current_release_check.stat.islnk }}"

    - name: Gather deployment run facts
      set_fact:
        deploy_release_id: "{{ ansible_date_time.iso8601_basic_short }}"
        deploy_keep_current_release: "{{ deploy_skip_installation | default(false) and deploy_previous_release_exists }}"
        deploy_previous_release_id: "{{ deploy_previous_release_exists | ternary((_current_release_check.stat.lnk_target | default('')).split('/') | last, false) }}"
    
    - name: "Skipping installation: reusing previous release"
      set_fact:
        deploy_release_id: "{{ deploy_previous_release_id }}"
      when: "deploy_skip_installation"

    - name: Compute release id
      set_fact:
        magento_release_id: "{{ deploy_keep_current_release | ternary(deploy_previous_release_id, deploy_release_id) }}"

    - name: Print deployment run information
      debug:
        msg: |
          ========================================
          ==     Starting Magento Deployment    ==
          ========================================

          Previous release id: {{ deploy_previous_release_id | ternary( deploy_previous_release_id, 'None - fresh install') }}
          Deployed release id: {{ deploy_release_id }}

          {{ deploy_keep_current_release | ternary('Code deploy is skipped!', 'New code will be deployed!') }}

          ----------------------------------------

  roles:
    - role: cs.aws-facts-all
      aws_facts_gather_ami: no
      delegate_to: localhost
      delegate_facts: no
      become: no
      when: aws_use

    - role: cs.switch-to-dnf
    - role: cs.deploy
      deploy_install_actions:
        - name: Configure Magento
          role: cs.magento-configure
      deploy_install_abort:
        - name: Failed deploy install stage - get rid of possible corrupted cache
          role: cs.magento-configure
          tasks_from: 060-flush-cache.yml
      deploy_release_actions:
        - name: Setup shared storage mounts
          role: cs.magento-shared-storage
      deploy_release_abort:
        - name: Failed deploy release stage - get rid of possible corrupted cache
          role: cs.magento-configure
          tasks_from: 060-flush-cache.yml
      deploy_post_actions:
        - name: Link static files version dir
          role: cs.magento-configure
          tasks_from: 200-static-symlink.yml

    - role: cs.magento-optimize-iops
      when: mageops_reduce_iops

    - role: cs.magento-import-dispatcher
      when: magento_import_dispatcher_enable

    - role: cs.magento-cache-warmup-crawler
      when: magento_page_cache_warmer_enable

  tasks:
    - name: Execute custom post deploy tasks
      include_tasks: "{{ mageops_extra_tasks_deploy }}"
      when: mageops_extra_tasks_deploy is defined and mageops_extra_tasks_deploy

  vars:
    deploy_install_new_release: "{{ not deploy_keep_current_release }}"
    deploy_keep_current_releases: 2
    deploy_copy_previous_release: yes
    deploy_directory_permissions: "0775"
    deploy_file_permissions: "0664"
    deploy_app_user: "{{ magento_user }}"
    deploy_app_group: "{{ magento_group }}"
    deploy_ssh_key_path: "{{ mageops_ansible_temp_dir }}/ssh-deploy-key.{{ mageops_app_name }}"
    deploy_webserver_user: nginx
    deploy_root_dir: "{{ mageops_app_web_dir }}"
    deploy_artifact_dir: "{{ deploy_artifact_local_path }}"
    deploy_artifact_temp_dir: /tmp/ansible-deploy-artifacts-temp
    deploy_releases_dir: "{{ deploy_root_dir }}/releases"
    deploy_current_release_dir: "{{ deploy_root_dir }}/current"
    deploy_shared_dirs_basic:
      - 'pub/media'
      - 'pub/shared'
      - 'var/import'
      - 'var/export'
    deploy_shared_dirs: "{{ deploy_shared_dirs_basic + deploy_shared_dirs_extra }}"
    deploy_writable_dirs:
      - "var"
      - "pub"
      - "generated"
    deploy_rsync_excludes: "{{ deploy_rsync_excludes_basic + deploy_rsync_excludes_extra }}"
    deploy_copy_previous_excludes:
      - "/var"
      - "/generated"
    deploy_perm_fix_find_opts: "-xdev"
    deploy_restarted_services:
      - php-fpm
      - nginx

    # Helper variables for sanity checks and messages
    deploy_artifact_composer_json_local_path: "{{ deploy_artifact_local_path ~ '/composer.json' }}"
    deploy_artifact_composer_json_data: "{{ lookup('file', deploy_artifact_composer_json_local_path, errors='warn', lstrip=true, rstrip=true) | default('{}', true) | from_json }}"

    magento_core_config_settings: "{{ magento_core_config_settings_default + magento_core_config_settings_extra }}"
    magento_core_config_settings_to_remove: "{{ magento_core_config_settings_to_remove_default + magento_core_config_settings_to_remove_extra }}"
    magento_varnish_host: "{{ mageops_varnish_host }}"
    magento_varnish_port: "{{ mageops_varnish_port }}"
    magento_static_cache_dir: "{{ deploy_releases_dir }}/{{ deploy_release_id }}/pub/static/_cache"
    magento_media_dir: "{{ mageops_app_web_dir }}/shared/pub/media"
    
    magento_efs_app_mounts_extra: "{{ magento_efs_app_node_mounts }}"
    magento_s3_app_mounts_extra: "{{ magento_s3fs_buckets_extra }}"

