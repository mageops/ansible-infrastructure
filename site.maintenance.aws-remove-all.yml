- hosts: localhost
  connection: local
  pre_tasks:
    - name: Get VPC data
      block:
        - name: Get VPC data
          amazon.aws.ec2_vpc_net_info:
            region: "{{ aws_region }}"
            filters:
              "tag:Project": "{{ mageops_project }}"
              "tag:Environment": "{{ mageops_environment }}"
          register: _aws_vpc
        - name: Set VPC ID
          set_fact:
            _aws_vpc_id: "{{ _aws_vpc | json_query('vpcs[0].vpc_id')}}"


  tasks:
    - name: Remove Auto Scaling Groups and App servers
      ec2_asg:
        name: "{{ item.auto_scaling_group_name }}"
        region: "{{ aws_region }}"
        state: absent
      with_items:
       - "{{ aws_autoscaling_app }}"
       - "{{ aws_autoscaling_app_extra }}"
       - "{{ aws_autoscaling_app_pio }}"
      when: remove_asg

    - name: Remove other EC2 Servers
      ec2:
        instance_ids: "{{ item.instance_id }}"
        region: "{{ aws_region }}"
        state: absent
        wait: no
      with_items:
        - "{{ aws_persistent_node_instance }}"
        - "{{ aws_varnish_node_instance }}"
      when: remove_ec2

    - name: Remove RDS
      block:
        - name: Get list of RDS instances
          community.aws.rds_instance_info:
            region: "{{ aws_region }}"
          register: _rds_instances_info
        - name: Set list of rds instances
          set_fact:
            _aws_rds_instances: "{{ _rds_instances_info.instances }}"
        - name: Filter rds instance list by tags
          set_fact:
            _aws_rds_instances: "{{ _aws_rds_instances | json_query(rds_instances_tag_filter_query) | default([]) }}"
          vars:
            rds_instances_tag_filter_query: "[?{% for k, v in aws_rds_facts_mysql_tags.items() -%}tags.{{ k }} == '{{ v }}'{% if not loop.last %} && {% endif %}{% endfor %}]"
        - name: Warn when more than one instance has been found
          debug:
            msg: |
              Warning! More than one matching rds instance found, using first one.
              Found: {{ _aws_rds_instances | map(attribute='db_instance_identifier') | join(', ') }}
          when: _aws_rds_instances | length > 1
        - name: Set facts about project's rds instance
          set_fact:
            aws_rds_instance_id: "{{ (_aws_rds_instances | first).db_instance_identifier }}"
          when: _aws_rds_instances | length > 0
        - name: Terminate RDS instance
          when: _aws_rds_instance_id == aws_rds_instance_name
          rds:
            command: delete
            instance_name: "{{ aws_rds_instance_name }}"
            # snapshot: "{{ aws_rds_instance_name }}-snapshot"
      when: remove_rds

    - name: Remove Volumes
      # Currently not working. There seems to be a bug in Ansible and tags are required
      # We do not set tags for volumes
      block:
        - name: Get list of Volumes
          ec2_vol_facts:
            region: "{{ aws_region }}"
            filters:
              "status": "available"
            #   "tag:Environment": "{{ mageops_environment }}"
          register: _aws_fact
        - debug:
            var: _aws_fact
      when: remove_vol

    - name: Remove EFS
      block:
        - name: Get list of EFS drives
          efs_facts:
            region: "{{ aws_region }}"
            tags: "{{ aws_tags_base }}"
          register: _aws_fact
        - name: Set list of EFS instances to drop
          set_fact:
            _aws_efs_to_remove: "{{ _aws_fact | json_query('ansible_facts.efs[].file_system_id')}}"
        - name: Remove EFS
          efs:
            id: "{{ item }}"
            region: "{{ aws_region }}"
            state: absent
          with_items: "{{ _aws_efs_to_remove }}"
      when: remove_efs

    - name: Remove Lambdas
      block:
        - name: Remove Lambdas
          lambda:
            name: "{{ item }}"
            state: absent
            region: "{{ aws_region }}"
          with_items:
            - "handleAutoscalingEvent-{{ mageops_app_name }}"
            - "updateVarnishBackends-{{ mageops_app_name }}"
      when: remove_lambda

    - name: Remove Security Groups
      block:
        - name: Get list of Security Groups for VPC
          amazon.aws.ec2_group_info:
            region: "{{ aws_region }}"
            filters:
              "vpc-id": "{{ _aws_vpc_id }}"
          register: _aws_fact
        - name: Set list of Security Groups to drop
          set_fact:
            _aws_groups_to_remove: "{{ _aws_fact | json_query(query)}}"
          vars:
            query: "security_groups[?group_name!='default'].{id: group_id, name: group_name}"
        - name: Drop rules from SG (removes circular dependencies)
          ec2_group:
            region: "{{ aws_region }}"
            state: present
            rules: []
            purge_rules: yes
            name: "{{ item.name }}"
            description: "To be removed"
          with_items: "{{ _aws_groups_to_remove }}"
        - name: Drop Security Groups
          ec2_group:
            region: "{{ aws_region }}"
            state: absent
            name: "{{ item.name }}"
          with_items: "{{ _aws_groups_to_remove }}"
      when: remove_sg

    - name: Remove S3 Buckets
      block:
        - name: Remove S3 bucket
          s3_bucket:
            state: absent
            region: "{{ aws_region }}"
            name: "{{ item }}"
            force: yes
          with_items:
            - "{{ aws_s3_media_bucket }}"
            - "{{ aws_s3_secret_bucket }}"
      when: remove_s3

    - name: Remove LC
      include_role:
        name: cs.aws-ec2-cleanup
      vars:
        aws_ec2_cleanup_lcs_to_keep: 0
        aws_ec2_cleanup_lc_name_prefixes:
          - "{{ mageops_app_name }}-app-"
          - "{{ mageops_app_name }}-extra-app-"
      when: remove_asg

  vars:
    remove_asg: yes
    remove_ec2: yes
    remove_rds: yes
    remove_efs: yes
    remove_lambda: yes
    remove_sg: yes
    remove_vol: yes
    remove_s3: no
