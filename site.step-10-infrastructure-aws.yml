- hosts: localhost
  connection: local
  gather_facts: false
  pre_tasks:
    - name: Collect minimum facts (we need date time stuff)
      setup:
        gather_subset: min
  roles:
    - role: cs.aws-vpc
    - role: cs.aws-security-group
      aws_security_group_rds_create: "{{ aws_rds_create }}"
      aws_security_group_redis_create: "{{ mageops_redis_create or mageops_redis_sessions_create }}"
      aws_security_group_rabbitmq_create: "{{ mageops_rabbitmq_create and magento_rabbitmq_queue }}"
      aws_security_group_elasticsearch_create: "{{ mageops_elasticsearch_create }}"
    - role: cs.aws-s3
    - role: cs.aws-cloudfront
      aws_cloudfront_use_lambda: "{{ aws_cloudfront_optimizing_edge_lambda_enable }}"
      aws_cloudfront_lambda_arn: "{{ aws_cloudfront_lambda_latest_arn | default(omit, true) }}"
      when: aws_cloudfront_distribution_create | bool
    - role: cs.aws-rds
      when: aws_rds_create
    - role: cs.aws-loadbalancer
      lb_ssl_cert: "{{ aws_elb_https_certificate_arn }}"
      lb_s3_logs_bucket: "{{ aws_s3_secret_bucket }}"
      lb_http_port: "{{ mageops_varnish_port }}"
      when: aws_elb_create
    - role: cs.aws-ami-facts
    - role: cs.aws-node-facts
    - role: cs.aws-node-varnish
      aws_varnish_node_root_device: "{{ aws_ami_root_device }}"
      aws_varnish_node_vpc_subnet_id: "{{ aws_vpc_subnet_id }}"
      when: varnish_standalone
    - role: cs.aws-node-persistent
      aws_persistent_node_root_device: "{{ aws_ami_root_device }}"
      aws_persistent_node_vpc_subnet_id: "{{ aws_vpc_subnet_id }}"
    - role: cs.mysql-configure
    - role: cs.aws-lambda-varnish
      when: varnish_standalone
    - role: cs.aws-lambda-import
  tasks:
    - name: Refresh inventory to get info about newly created nodes
      meta: refresh_inventory

